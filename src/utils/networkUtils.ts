// src/utils/networkUtils.ts - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { supabase } from '../lib/supabase';
import { 
  isTokenValid, 
  isOnline, 
  withTimeout, 
  globalOperationManager,
  createOperationId 
} from './performanceUtils';

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç–µ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
 */

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏
export const checkNetworkConnection = (): boolean => {
  return isOnline();
};

// –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase
export const checkSupabaseConnection = async (): Promise<boolean> => {
  const operationId = createOperationId();
  
  if (!globalOperationManager.start(operationId)) {
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
    return false;
  }

  try {
    const { error } = await withTimeout(supabase.auth.getSession(), 3000);
    return !error;
  } catch {
    return false;
  } finally {
    globalOperationManager.end(operationId);
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage
export const checkStoredTokenValidity = (): boolean => {
  try {
    const stored = localStorage.getItem('sb-auth-token');
    if (!stored) return false;
    
    const session = JSON.parse(stored);
    if (!session.expires_at) return false;
    
    return isTokenValid(new Date(session.expires_at).getTime() / 1000);
  } catch {
    return false;
  }
};

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
export const forceTokenRefresh = async (): Promise<boolean> => {
  const operationId = createOperationId();
  
  if (!globalOperationManager.start(operationId)) {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
    return false;
  }

  try {
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞...');
    
    const { data, error } = await withTimeout(
      supabase.auth.refreshSession(),
      5000
    );
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      return false;
    }
    
    if (data.session) {
      console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    return false;
  } finally {
    globalOperationManager.end(operationId);
  }
};

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase
export const restoreSupabaseConnection = async (): Promise<boolean> => {
  try {
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å
    if (!checkNetworkConnection()) {
      console.log('üåê –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    if (checkStoredTokenValidity()) {
      console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω');
      return true;
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    const { data: { session }, error } = await withTimeout(
      supabase.auth.getSession(),
      5000
    );
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
      const refreshed = await forceTokenRefresh();
      if (refreshed) {
        console.log('‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞');
        return true;
      }
      
      return false;
    }
    
    if (session) {
      console.log('‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      return true;
    }
    
    console.log('‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return false;
  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
    return false;
  }
};

// –£–º–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export const reconnectToSupabase = async (maxAttempts = 5): Promise<void> => {
  return new Promise((resolve, reject) => {
    let attempts = 0;
    
    const attemptReconnect = async () => {
      attempts++;
      
      if (attempts > maxAttempts) {
        reject(new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`));
        return;
      }
      
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${attempts}/${maxAttempts}`);
      
      const isOnline = checkNetworkConnection();
      
      if (!isOnline) {
        console.log('üåê –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º, –∂–¥–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');
        setTimeout(attemptReconnect, 5000);
        return;
      }
      
      const isConnected = await restoreSupabaseConnection();
      
      if (isConnected) {
        console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');
        resolve();
      } else {
        const delay = Math.min(1000 * Math.pow(2, attempts - 1), 30000); // Exponential backoff
        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay}ms...`);
        setTimeout(attemptReconnect, delay);
      }
    };
    
    attemptReconnect();
  });
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Å–µ—Ç–∏ —Å debouncing
export const setupNetworkEventListeners = () => {
  let onlineTimeout: NodeJS.Timeout;
  let offlineTimeout: NodeJS.Timeout;
  
  const handleOnline = () => {
    clearTimeout(offlineTimeout);
    onlineTimeout = setTimeout(() => {
      console.log('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      restoreSupabaseConnection();
    }, 1000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
  };
  
  const handleOffline = () => {
    clearTimeout(onlineTimeout);
    offlineTimeout = setTimeout(() => {
      console.log('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ');
    }, 1000);
  };
  
  window.addEventListener('online', handleOnline);
  window.addEventListener('offline', handleOffline);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
  return () => {
    clearTimeout(onlineTimeout);
    clearTimeout(offlineTimeout);
    window.removeEventListener('online', handleOnline);
    window.removeEventListener('offline', handleOffline);
  };
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { isTokenValid } from './performanceUtils';