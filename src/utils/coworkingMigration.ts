// src/utils/coworkingMigration.ts
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã –≤ –Ω–æ–≤—É—é

import { supabase } from '../lib/supabase';
import { updateCoworkingPageSettings } from '../api/coworking';

export interface MigrationResult {
  success: boolean;
  message: string;
  migratedServices: number;
  errors: string[];
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
export const migrateCoworkingData = async (): Promise<MigrationResult> => {
  const errors: string[] = [];
  let migratedServices = 0;

  try {
    console.log('üîÑ Starting coworking data migration...');

    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü
    const [headerResponse, servicesResponse, oldSettingsResponse] = await Promise.all([
      supabase
        .from('coworking_header')
        .select('*')
        .single(),
      supabase
        .from('coworking_info_table')
        .select('*')
        .order('order', { ascending: true }),
      supabase
        .from('site_settings')
        .select('coworking_header_settings')
        .single()
    ]);

    console.log('üìä Old data loaded:', {
      header: !!headerResponse.data,
      services: servicesResponse.data?.length || 0,
      oldSettings: !!oldSettingsResponse.data?.coworking_header_settings
    });

    // 2. –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã
    const services = servicesResponse.data?.map(service => ({
      id: service.id,
      name: service.name || '',
      description: service.description || '',
      price: service.price || 0,
      currency: service.currency || 'euro',
      period: service.period || '—á–∞—Å',
      active: service.active !== false,
      image_url: service.image_url || '',
      order: service.order || 0,
      main_service: service.main_service !== false
    })) || [];

    const migratedSettings = {
      title: headerResponse.data?.title || 
             oldSettingsResponse.data?.coworking_header_settings?.title || 
             '–ö–æ–≤–æ—Ä–∫–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ',
      description: headerResponse.data?.description || 
                  oldSettingsResponse.data?.coworking_header_settings?.description || 
                  '–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤',
      heroImage: '',
      address: oldSettingsResponse.data?.coworking_header_settings?.address || 
               headerResponse.data?.address || 
               '–°–∞—Ä–∞–µ–≤—Å–∫–∞—è, 48',
      phone: oldSettingsResponse.data?.coworking_header_settings?.phone || 
             headerResponse.data?.phone || 
             '+381',
      working_hours: oldSettingsResponse.data?.coworking_header_settings?.working_hours || 
                     headerResponse.data?.working_hours || 
                     '10:00-18:00',
      email: 'info@sciencehub.site',
      telegram: '@sciencehub',
      services: services,
      mainServices: services.filter(s => s.main_service && s.active),
      metaDescription: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ –≤ –°–µ—Ä–±–∏–∏',
      showBookingForm: true,
      bookingFormFields: ['name', 'contact', 'phone', 'comment']
    };

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤—É—é —Å—Ö–µ–º—É
    console.log('üíæ Saving to new schema...');
    const updateResult = await updateCoworkingPageSettings(migratedSettings);

    if (updateResult.error) {
      throw new Error(`Failed to save migrated data: ${updateResult.error}`);
    }

    migratedServices = services.length;

    console.log('‚úÖ Migration completed successfully');
    return {
      success: true,
      message: `–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ ${migratedServices} —É—Å–ª—É–≥.`,
      migratedServices,
      errors
    };

  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    errors.push(`Migration error: ${error}`);
    
    return {
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
      migratedServices,
      errors
    };
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
export const checkMigrationNeeded = async (): Promise<boolean> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ
    const { data: newSettings } = await supabase
      .from('sh_site_settings')
      .select('coworking_page_settings')
      .eq('is_active', true)
      .single();

    if (newSettings?.coworking_page_settings?.services?.length > 0) {
      console.log('‚úÖ New schema already has data, migration not needed');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    const [servicesResponse] = await Promise.all([
      supabase
        .from('coworking_info_table')
        .select('id')
        .limit(1)
    ]);

    const hasOldData = servicesResponse.data && servicesResponse.data.length > 0;
    
    console.log(`${hasOldData ? 'üîÑ' : '‚úÖ'} Migration ${hasOldData ? 'needed' : 'not needed'}`);
    return hasOldData;

  } catch (error) {
    console.error('Error checking migration status:', error);
    return false;
  }
};

// –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export const backupOldData = async (): Promise<{ success: boolean; message: string }> => {
  try {
    console.log('üíæ Creating backup of old coworking data...');

    const [headerResponse, servicesResponse, settingsResponse] = await Promise.all([
      supabase.from('coworking_header').select('*'),
      supabase.from('coworking_info_table').select('*'),
      supabase.from('site_settings').select('coworking_header_settings')
    ]);

    const backup = {
      timestamp: new Date().toISOString(),
      coworking_header: headerResponse.data,
      coworking_info_table: servicesResponse.data,
      site_settings_coworking: settingsResponse.data,
      migration_version: '1.0'
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É migration_backups (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    // –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    console.log('üìã Backup data (save this manually if needed):', JSON.stringify(backup, null, 2));

    return {
      success: true,
      message: '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –î–∞–Ω–Ω—ã–µ –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª—å.'
    };

  } catch (error) {
    console.error('‚ùå Backup failed:', error);
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${error}`
    };
  }
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export const validateMigration = async (): Promise<{ success: boolean; message: string; issues: string[] }> => {
  const issues: string[] = [];

  try {
    console.log('üîç Validating migration...');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã
    const { data: newSettings } = await supabase
      .from('sh_site_settings')
      .select('coworking_page_settings')
      .eq('is_active', true)
      .single();

    if (!newSettings?.coworking_page_settings) {
      issues.push('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ');
      return { success: false, message: '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', issues };
    }

    const settings = newSettings.coworking_page_settings;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    if (!settings.title) issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫');
    if (!settings.description) issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ');
    if (!settings.services || !Array.isArray(settings.services)) {
      issues.push('–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª—É–≥–∏
      settings.services.forEach((service: any, index: number) => {
        if (!service.id) issues.push(`–£—Å–ª—É–≥–∞ ${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID`);
        if (!service.name) issues.push(`–£—Å–ª—É–≥–∞ ${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ`);
        if (typeof service.price !== 'number') issues.push(`–£—Å–ª—É–≥–∞ ${index + 1}: –Ω–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞`);
      });
    }

    const success = issues.length === 0;
    const message = success 
      ? `–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ ${settings.services?.length || 0} —É—Å–ª—É–≥.`
      : `–ù–∞–π–¥–µ–Ω–æ ${issues.length} –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏`;

    console.log(success ? '‚úÖ' : '‚ö†Ô∏è', message);
    if (issues.length > 0) {
      console.log('Issues found:', issues);
    }

    return { success, message, issues };

  } catch (error) {
    console.error('‚ùå Validation failed:', error);
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error}`,
      issues: [`Validation error: ${error}`]
    };
  }
};