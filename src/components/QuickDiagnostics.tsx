// –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é checkConnections –≤ QuickDiagnostics.tsx
const checkConnections = async () => {
  setStatus(prev => ({ ...prev, checking: true }));
  
  try {
    console.log('üîç Starting connection check...');
    
    // –£–ü–†–û–©–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    let dbStatus = false;
    let dbError = null;
    
    try {
      // –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ PostgreSQL
      const { data: dbData, error: dbErr } = await supabase.rpc('version');
      dbStatus = !dbErr;
      dbError = dbErr;
    } catch (err) {
      console.error('‚ùå DB check failed with exception:', err);
      dbStatus = false;
      dbError = err;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    let authStatus = false;
    let authError = null;
    
    try {
      const { data: authData, error: authErr } = await supabase.auth.getSession();
      authStatus = !authErr && !!authData.session;
      authError = authErr;
    } catch (err) {
      console.error('‚ùå Auth check failed with exception:', err);
      authStatus = false;
      authError = err;
    }
    
    setStatus({
      db: dbStatus,
      auth: authStatus,
      lastCheck: new Date().toLocaleTimeString(),
      checking: false
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üîç Connection check result:', {
      database: dbStatus,
      auth: authStatus,
      dbError,
      authError,
      timestamp: new Date().toISOString()
    });
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –ª–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏
    if (!dbStatus) {
      console.error('‚ùå Database connection failed:', dbError);
    }
    if (!authStatus) {
      console.warn('‚ö†Ô∏è Auth session issue:', authError || 'No session');
    }
    
  } catch (error) {
    console.error('‚ùå Connection check failed:', error);
    setStatus({
      db: false,
      auth: false,
      lastCheck: new Date().toLocaleTimeString(),
      checking: false
    });
  }
};