// src/components/SessionMonitor.tsx
import { useEffect, useRef } from 'react';
import { supabase, clearStoredSession } from '../lib/supabase';
import { toast } from 'react-hot-toast';
import { 
  checkNetworkConnection, 
  setupNetworkEventListeners, 
  isTokenValid, 
  forceTokenRefresh 
} from '../utils/networkUtils';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ Supabase
 * –ü–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∞–Ω–∏–π –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
const SessionMonitor = () => {
  const sessionCheckInterval = useRef<NodeJS.Timeout | null>(null);
  const lastSessionCheck = useRef<number>(Date.now());
  const sessionLostNotificationShown = useRef<boolean>(false);

  useEffect(() => {
    console.log('üîç SessionMonitor: –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Å—Å–∏–∏');

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
    const cleanupNetworkListeners = setupNetworkEventListeners();

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    const checkSessionHealth = async () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (!checkNetworkConnection()) {
        console.log('üîç SessionMonitor: –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
        return;
      }

      try {
        const { data: { session }, error } = await supabase.auth.getSession();
        
        if (error) {
          console.warn('üîç SessionMonitor: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏:', error);
          
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∏—Å—Ç–µ–∫—à–µ–π —Å–µ—Å—Å–∏–µ–π
          if (error.message.includes('refresh_token_not_found') || 
              error.message.includes('invalid_token') ||
              error.message.includes('JWT expired')) {
            handleSessionLost();
          }
          return;
        }

        // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (session) {
          lastSessionCheck.current = Date.now();
          sessionLostNotificationShown.current = false;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
          if (session.expires_at && !isTokenValid(session.expires_at)) {
            console.log('üîç SessionMonitor: –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç, –ø–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            const refreshed = await forceTokenRefresh();
            
            if (!refreshed) {
              console.error('üîç SessionMonitor: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω');
              handleSessionLost();
              return;
            }
          }
        } else {
          // –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
          const timeSinceLastCheck = Date.now() - lastSessionCheck.current;
          const fiveMinutes = 5 * 60 * 1000;
          
          if (timeSinceLastCheck > fiveMinutes) {
            handleSessionLost();
          }
        }
      } catch (error) {
        console.error('üîç SessionMonitor: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏:', error);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (error instanceof TypeError && error.message.includes('fetch')) {
          console.log('üîç SessionMonitor: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É');
          return;
        }
        
        handleSessionLost();
      }
    };

    // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–µ—Ä–∏ —Å–µ—Å—Å–∏–∏
    const handleSessionLost = () => {
      if (!sessionLostNotificationShown.current) {
        console.warn('üîç SessionMonitor: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ç–µ—Ä—è —Å–µ—Å—Å–∏–∏');
        
        // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        clearStoredSession();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        toast.error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.', {
          duration: 5000,
          id: 'session-expired' // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        });
        
        sessionLostNotificationShown.current = true;
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        supabase.auth.signOut().catch(error => {
          console.error('üîç SessionMonitor: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –≤—ã—Ö–æ–¥–µ:', error);
        });
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    sessionCheckInterval.current = setInterval(checkSessionHealth, 30000);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É
    checkSessionHealth();

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible') {
        console.log('üîç SessionMonitor: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é');
        checkSessionHealth();
      }
    };

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è focus/blur –æ–∫–Ω–∞
    const handleWindowFocus = () => {
      console.log('üîç SessionMonitor: –û–∫–Ω–æ –ø–æ–ª—É—á–∏–ª–æ —Ñ–æ–∫—É—Å, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é');
      checkSessionHealth();
    };

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    document.addEventListener('visibilitychange', handleVisibilityChange);
    window.addEventListener('focus', handleWindowFocus);

    // Cleanup —Ñ—É–Ω–∫—Ü–∏—è
    return () => {
      console.log('üîç SessionMonitor: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Å—Å–∏–∏');
      
      if (sessionCheckInterval.current) {
        clearInterval(sessionCheckInterval.current);
      }
      
      document.removeEventListener('visibilitychange', handleVisibilityChange);
      window.removeEventListener('focus', handleWindowFocus);
      
      // –û—á–∏—â–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
      cleanupNetworkListeners();
    };
  }, []);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –Ω–∏—á–µ–≥–æ
  return null;
};

export default SessionMonitor;