// src/lib/supabase.ts
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Supabase

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables');
}

// –°–û–ó–î–ê–ï–ú –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–†
let supabaseInstance: ReturnType<typeof createClient> | null = null;

export const getSupabase = () => {
  if (!supabaseInstance) {
    console.log('üîó Creating Supabase client instance...');
    supabaseInstance = createClient(supabaseUrl, supabaseAnonKey, {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: true,
        flowType: 'pkce'
      }
    });
  } else {
    console.log('üîó Reusing existing Supabase client instance');
  }
  return supabaseInstance;
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const supabase = getSupabase();

// API Response —Ç–∏–ø—ã
export interface ApiResponse<T> {
  data: T | null;
  error: string | null;
}

export const createApiResponse = <T>(data: T | null, error?: any): ApiResponse<T> => {
  return {
    data,
    error: error ? (typeof error === 'string' ? error : error.message || 'Unknown error') : null
  };
}; 
