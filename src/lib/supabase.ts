// src/lib/supabase.ts
// –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables');
}

// –°–û–ó–î–ê–ï–ú –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
let supabaseInstance: ReturnType<typeof createClient> | null = null;

const getSupabase = () => {
  if (!supabaseInstance) {
    console.log('üîó Creating single Supabase client instance with improved settings...');
    
    supabaseInstance = createClient(supabaseUrl, supabaseAnonKey, {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: true,
        flowType: 'pkce',
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è auth –∑–∞–ø—Ä–æ—Å–æ–≤
        sessionRefreshMargin: 60, // –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∑–∞ 60 —Å–µ–∫—É–Ω–¥ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
      },
      db: {
        schema: 'public',
      },
      global: {
        headers: {
          'x-client-info': 'webapp-v1.0.0',
        },
        // –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º fetch —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        fetch: (url, options = {}) => {
          const controller = new AbortController();
          const timeoutId = setTimeout(() => {
            console.warn(`‚è∞ Request timeout: ${url}`);
            controller.abort();
          }, 10000); // 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º –¥–ª—è –ª—é–±–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

          return fetch(url, {
            ...options,
            signal: controller.signal,
          }).finally(() => {
            clearTimeout(timeoutId);
          });
        },
      },
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è realtime (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
      realtime: {
        params: {
          eventsPerSecond: 5, // –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
        },
      },
    });

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ auth —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    supabaseInstance.auth.onAuthStateChange((event, session) => {
      console.log(`üîê Auth event: ${event}`, session?.user?.id || 'no user');
    });
  }
  
  return supabaseInstance;
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const supabase = getSupabase();

// API Response —Ç–∏–ø—ã
export interface ApiResponse<T> {
  data: T | null;
  error: string | null;
}

export interface PaginatedResponse<T> {
  data: T[];
  count: number | null;
  hasMore: boolean;
  page: number;
  pageSize: number;
  error: string | null;
}

export const createApiResponse = <T>(data: T | null, error?: any): ApiResponse<T> => {
  return {
    data,
    error: error ? (typeof error === 'string' ? error : error.message || 'Unknown error') : null
  };
};

export const createPaginatedResponse = <T>(
  data: T[], 
  count: number | null = null, 
  page: number = 1, 
  pageSize: number = 10,
  error?: any
): PaginatedResponse<T> => {
  const hasMore = count ? (page * pageSize) < count : data.length === pageSize;
  
  return {
    data: data || [],
    count,
    hasMore,
    page,
    pageSize,
    error: error ? (typeof error === 'string' ? error : error.message || 'Unknown error') : null
  };
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
export const safeQuery = async <T>(
  operation: () => Promise<{ data: T; error: any }>,
  timeoutMs = 8000,
  retries = 1
): Promise<{ data: T | null; error: any }> => {
  let lastError = null;
  
  for (let i = 0; i <= retries; i++) {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        console.warn(`‚è∞ Query timeout after ${timeoutMs}ms`);
        controller.abort();
      }, timeoutMs);

      const result = await operation();
      clearTimeout(timeoutId);
      
      if (result.error) {
        lastError = result.error;
        
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –ø—ã—Ç–∞–µ–º—Å—è –µ—â–µ —Ä–∞–∑
        if (i < retries && isRetryableError(result.error)) {
          console.warn(`Query failed (attempt ${i + 1}/${retries + 1}), retrying...`, result.error);
          await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
          continue;
        }
        
        return { data: null, error: result.error };
      }
      
      return result;
    } catch (error) {
      lastError = error;
      
      if (i < retries) {
        console.warn(`Query exception (attempt ${i + 1}/${retries + 1}), retrying...`, error);
        await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
        continue;
      }
    }
  }
  
  return { data: null, error: lastError };
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å
const isRetryableError = (error: any): boolean => {
  if (!error) return false;
  
  const retryableErrors = [
    'network error',
    'fetch failed',
    'connection timeout',
    'aborted',
    'PGRST301', // JWT expired
  ];
  
  const errorMessage = error.message?.toLowerCase() || '';
  const errorCode = error.code || '';
  
  return retryableErrors.some(err => 
    errorMessage.includes(err) || errorCode === err
  );
};

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
const handleSupabaseError = (error: any) => {
  if (error?.code === 'PGRST116') {
    return '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
  }
  if (error?.code === '23505') {
    return '–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
  }
  if (error?.code === '42501') {
    return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞';
  }
  if (error?.name === 'AbortError') {
    return '–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É';
  }
  return error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö';
};

console.log('‚úÖ Supabase module loaded with improved client instance');