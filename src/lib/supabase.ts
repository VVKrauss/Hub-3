// src/lib/supabase.ts
// –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –í–°–ï–ú–ò –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables');
}

// –°–û–ó–î–ê–ï–ú –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–†
let supabaseInstance: ReturnType<typeof createClient> | null = null;

export const getSupabase = () => {
  if (!supabaseInstance) {
    console.log('üîó Creating single Supabase client instance...');
    supabaseInstance = createClient(supabaseUrl, supabaseAnonKey, {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: true,
        flowType: 'pkce'
      }
    });
  }
  return supabaseInstance;
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const supabase = getSupabase();

// API Response —Ç–∏–ø—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
export interface ApiResponse<T> {
  data: T | null;
  error: string | null;
}

export interface PaginatedResponse<T> {
  data: T[];
  count: number | null;
  hasMore: boolean;
  page: number;
  pageSize: number;
  error: string | null;
}

export const createApiResponse = <T>(data: T | null, error?: any): ApiResponse<T> => {
  return {
    data,
    error: error ? (typeof error === 'string' ? error : error.message || 'Unknown error') : null
  };
};

// –î–û–ë–ê–í–õ–Ø–ï–ú –ù–ï–î–û–°–¢–ê–Æ–©–£–Æ –§–£–ù–ö–¶–ò–Æ
export const createPaginatedResponse = <T>(
  data: T[], 
  count: number | null = null, 
  page: number = 1, 
  pageSize: number = 10,
  error?: any
): PaginatedResponse<T> => {
  const hasMore = count ? (page * pageSize) < count : data.length === pageSize;
  
  return {
    data: data || [],
    count,
    hasMore,
    page,
    pageSize,
    error: error ? (typeof error === 'string' ? error : error.message || 'Unknown error') : null
  };
};

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
export const handleSupabaseError = (error: any) => {
  if (error?.code === 'PGRST116') {
    return '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
  }
  if (error?.code === '23505') {
    return '–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
  }
  if (error?.code === '42501') {
    return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞';
  }
  return error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö';
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
export const safeSupabaseCall = async <T>(
  operation: () => Promise<any>,
  defaultValue: T | null = null
): Promise<ApiResponse<T>> => {
  try {
    const { data, error } = await operation();
    
    if (error) {
      console.error('Supabase error:', error);
      return createApiResponse(defaultValue, handleSupabaseError(error));
    }
    
    return createApiResponse(data);
  } catch (error) {
    console.error('Supabase operation failed:', error);
    return createApiResponse(defaultValue, error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
export const safePaginatedCall = async <T>(
  operation: () => Promise<any>,
  page: number = 1,
  pageSize: number = 10
): Promise<PaginatedResponse<T>> => {
  try {
    const { data, error, count } = await operation();
    
    if (error) {
      console.error('Supabase paginated error:', error);
      return createPaginatedResponse([], null, page, pageSize, handleSupabaseError(error));
    }
    
    return createPaginatedResponse(data || [], count, page, pageSize);
  } catch (error) {
    console.error('Supabase paginated operation failed:', error);
    return createPaginatedResponse([], null, page, pageSize, error);
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
export type { Database } from '../types/database';

console.log('‚úÖ Supabase module loaded with single client instance');