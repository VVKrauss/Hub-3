// src/api/coworking.ts
// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–æ–º –≤ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ sh_site_settings + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è

import { supabase, createApiResponse, type ApiResponse } from '../lib/supabase';

export interface CoworkingService {
  id: string;
  name: string;
  description: string;
  price: number;
  currency: 'euro' | '–∫–æ—Ñ–µ' | 'RSD';
  period: '—á–∞—Å' | '–¥–µ–Ω—å' | '–º–µ—Å—è—Ü';
  active: boolean;
  image_url: string;
  order: number;
  main_service: boolean;
}

export interface CoworkingPageSettings {
  title: string;
  description: string;
  heroImage: string;
  address?: string;
  phone?: string;
  working_hours?: string;
  email?: string;
  telegram?: string;
  services: CoworkingService[];
  mainServices: CoworkingService[];
  metaDescription: string;
  showBookingForm: boolean;
  bookingFormFields: string[];
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–µ–π
export const getCoworkingPageSettings = async (): Promise<ApiResponse<CoworkingPageSettings>> => {
  try {
    console.log('üè¢ Fetching coworking page settings...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã
    const { data: settings, error } = await supabase
      .from('sh_site_settings')
      .select('coworking_page_settings')
      .eq('is_active', true)
      .single();

    if (!error && settings?.coworking_page_settings?.services?.length > 0) {
      console.log('‚úÖ Loaded from new schema');
      return createApiResponse(settings.coworking_page_settings);
    }

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –º–∏–≥—Ä–∞—Ü–∏—é
    console.log('üîÑ No data in new schema, starting automatic migration...');
    return await migrateAndGetCoworkingSettings();

  } catch (error) {
    console.error('‚ùå Error fetching coworking settings:', error);
    return createApiResponse(null, error);
  }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã –≤ –Ω–æ–≤—É—é
const migrateAndGetCoworkingSettings = async (): Promise<ApiResponse<CoworkingPageSettings>> => {
  try {
    console.log('üìä Starting automatic data migration...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü
    const [headerResponse, servicesResponse, oldSettingsResponse] = await Promise.all([
      supabase
        .from('coworking_header')
        .select('*')
        .single()
        .then(res => ({ data: res.data, error: res.error })),
      supabase
        .from('coworking_info_table')
        .select('*')
        .order('order', { ascending: true })
        .then(res => ({ data: res.data, error: res.error })),
      supabase
        .from('site_settings')
        .select('coworking_header_settings')
        .single()
        .then(res => ({ data: res.data, error: res.error }))
    ]);

    console.log('üìã Migration data collected:', {
      header: !!headerResponse.data,
      services: servicesResponse.data?.length || 0,
      oldSettings: !!oldSettingsResponse.data?.coworking_header_settings
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã
    const services: CoworkingService[] = servicesResponse.data?.map(service => ({
      id: service.id,
      name: service.name || '',
      description: service.description || '',
      price: service.price || 0,
      currency: service.currency || 'euro',
      period: service.period || '—á–∞—Å',
      active: service.active !== false,
      image_url: service.image_url || '',
      order: service.order || 0,
      main_service: service.main_service !== false
    })) || [];

    const migratedSettings: CoworkingPageSettings = {
      title: headerResponse.data?.title || 
             oldSettingsResponse.data?.coworking_header_settings?.title || 
             '–ö–æ–≤–æ—Ä–∫–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ',
      description: headerResponse.data?.description || 
                  oldSettingsResponse.data?.coworking_header_settings?.description || 
                  '–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤',
      heroImage: '',
      address: oldSettingsResponse.data?.coworking_header_settings?.address || 
               headerResponse.data?.address || 
               '–°–∞—Ä–∞–µ–≤—Å–∫–∞—è, 48',
      phone: oldSettingsResponse.data?.coworking_header_settings?.phone || 
             headerResponse.data?.phone || 
             '+381',
      working_hours: oldSettingsResponse.data?.coworking_header_settings?.working_hours || 
                     headerResponse.data?.working_hours || 
                     '10:00-18:00',
      email: 'info@sciencehub.site',
      telegram: '@sciencehub',
      services: services,
      mainServices: services.filter(s => s.main_service && s.active),
      metaDescription: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ –≤ –°–µ—Ä–±–∏–∏',
      showBookingForm: true,
      bookingFormFields: ['name', 'contact', 'phone', 'comment']
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤—É—é —Å—Ö–µ–º—É
    console.log('üíæ Saving migrated data to new schema...');
    const saveResult = await updateCoworkingPageSettings(migratedSettings);
    
    if (saveResult.error) {
      throw new Error(`Migration save failed: ${saveResult.error}`);
    }

    console.log('‚úÖ Automatic migration completed successfully!', {
      services: services.length,
      mainServices: migratedSettings.mainServices.length
    });
    
    return createApiResponse(migratedSettings);

  } catch (error) {
    console.error('‚ùå Automatic migration failed:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    const defaultSettings: CoworkingPageSettings = {
      title: '–ö–æ–≤–æ—Ä–∫–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ',
      description: '–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤',
      heroImage: '',
      address: '–°–∞—Ä–∞–µ–≤—Å–∫–∞—è, 48',
      phone: '+381',
      working_hours: '10:00-18:00',
      email: 'info@sciencehub.site',
      telegram: '@sciencehub',
      services: [],
      mainServices: [],
      metaDescription: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ –≤ –°–µ—Ä–±–∏–∏',
      showBookingForm: true,
      bookingFormFields: ['name', 'contact', 'phone', 'comment']
    };

    await updateCoworkingPageSettings(defaultSettings);
    return createApiResponse(defaultSettings);
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞
export const updateCoworkingPageSettings = async (settings: Partial<CoworkingPageSettings>): Promise<ApiResponse<CoworkingPageSettings>> => {
  try {
    console.log('üíæ Updating coworking page settings...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const { data: currentSettings } = await supabase
      .from('sh_site_settings')
      .select('id, coworking_page_settings')
      .eq('is_active', true)
      .single();

    if (currentSettings) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      const updatedSettings = {
        ...currentSettings.coworking_page_settings,
        ...settings,
      };

      const { data, error } = await supabase
        .from('sh_site_settings')
        .update({
          coworking_page_settings: updatedSettings,
          updated_at: new Date().toISOString()
        })
        .eq('id', currentSettings.id)
        .select('coworking_page_settings')
        .single();

      if (error) throw error;
      
      console.log('‚úÖ Coworking settings updated successfully');
      return createApiResponse(data.coworking_page_settings);
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π
      const { data, error } = await supabase
        .from('sh_site_settings')
        .insert([{
          site_title: 'Science Hub',
          site_description: '–ù–∞—É—á–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤ –°–µ—Ä–±–∏–∏',
          coworking_page_settings: settings,
          is_active: true
        }])
        .select('coworking_page_settings')
        .single();

      if (error) throw error;
      
      console.log('‚úÖ New coworking settings created successfully');
      return createApiResponse(data.coworking_page_settings);
    }
  } catch (error) {
    console.error('‚ùå Error updating coworking settings:', error);
    return createApiResponse(null, error);
  }
};

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞
export const updateCoworkingService = async (service: Partial<CoworkingService>): Promise<ApiResponse<CoworkingService[]>> => {
  try {
    const currentSettings = await getCoworkingPageSettings();
    
    if (currentSettings.error || !currentSettings.data) {
      throw new Error('Failed to get current settings');
    }

    const services = [...(currentSettings.data.services || [])];
    
    if (service.id && service.id !== '') {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É—Å–ª—É–≥—É
      const index = services.findIndex(s => s.id === service.id);
      if (index !== -1) {
        services[index] = { ...services[index], ...service } as CoworkingService;
      }
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —É—Å–ª—É–≥—É
      const newService: CoworkingService = {
        id: `service_${Date.now()}`,
        name: service.name || '',
        description: service.description || '',
        price: service.price || 0,
        currency: service.currency || 'euro',
        period: service.period || '—á–∞—Å',
        active: service.active !== false,
        image_url: service.image_url || '',
        order: service.order || services.length,
        main_service: service.main_service !== false
      };
      services.push(newService);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º mainServices
    const mainServices = services.filter(s => s.main_service && s.active);

    const updateResult = await updateCoworkingPageSettings({
      services,
      mainServices
    });

    if (updateResult.error) throw updateResult.error;
    
    return createApiResponse(services);
  } catch (error) {
    console.error('Error updating coworking service:', error);
    return createApiResponse(null, error);
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞
export const deleteCoworkingService = async (serviceId: string): Promise<ApiResponse<CoworkingService[]>> => {
  try {
    const currentSettings = await getCoworkingPageSettings();
    
    if (currentSettings.error || !currentSettings.data) {
      throw new Error('Failed to get current settings');
    }

    const services = currentSettings.data.services.filter(s => s.id !== serviceId);
    const mainServices = services.filter(s => s.main_service && s.active);

    const updateResult = await updateCoworkingPageSettings({
      services,
      mainServices
    });

    if (updateResult.error) throw updateResult.error;
    
    return createApiResponse(services);
  } catch (error) {
    console.error('Error deleting coworking service:', error);
    return createApiResponse(null, error);
  }
};

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —É—Å–ª—É–≥
export const reorderCoworkingServices = async (serviceIds: string[]): Promise<ApiResponse<CoworkingService[]>> => {
  try {
    const currentSettings = await getCoworkingPageSettings();
    
    if (currentSettings.error || !currentSettings.data) {
      throw new Error('Failed to get current settings');
    }

    const services = [...currentSettings.data.services];
    
    // –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–º—É –ø–æ—Ä—è–¥–∫—É
    const reorderedServices = serviceIds.map((id, index) => {
      const service = services.find(s => s.id === id);
      if (service) {
        return { ...service, order: index };
      }
      return null;
    }).filter(Boolean) as CoworkingService[];

    // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫)
    services.forEach(service => {
      if (!serviceIds.includes(service.id)) {
        reorderedServices.push({ ...service, order: reorderedServices.length });
      }
    });

    const mainServices = reorderedServices.filter(s => s.main_service && s.active);

    const updateResult = await updateCoworkingPageSettings({
      services: reorderedServices,
      mainServices
    });

    if (updateResult.error) throw updateResult.error;
    
    return createApiResponse(reorderedServices);
  } catch (error) {
    console.error('Error reordering coworking services:', error);
    return createApiResponse(null, error);
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
export const getActiveCoworkingServices = async (): Promise<ApiResponse<{
  mainServices: CoworkingService[];
  additionalServices: CoworkingService[];
}>> => {
  try {
    const settings = await getCoworkingPageSettings();
    
    if (settings.error || !settings.data) {
      return createApiResponse({ mainServices: [], additionalServices: [] });
    }

    const activeServices = settings.data.services.filter(s => s.active);
    const mainServices = activeServices.filter(s => s.main_service).sort((a, b) => a.order - b.order);
    const additionalServices = activeServices.filter(s => !s.main_service).sort((a, b) => a.order - b.order);

    return createApiResponse({ mainServices, additionalServices });
  } catch (error) {
    console.error('Error getting active coworking services:', error);
    return createApiResponse({ mainServices: [], additionalServices: [] });
  }
};