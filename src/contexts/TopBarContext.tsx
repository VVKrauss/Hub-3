// src/contexts/TopBarContext.tsx - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
import { createContext, useContext, useState, useEffect, ReactNode, useRef } from 'react';
import { supabase } from '../lib/supabase';
import { getNavigationItems, getTopbarSettings } from '../api/settings';
import { toast } from 'react-hot-toast';

interface NavItem {
  id: string;
  label: string;
  path: string;
  visible: boolean;
  order: number;
  badge?: number;
}

interface UserProfile {
  id: string;
  email: string;
  name?: string;
  role?: string;
  avatar?: string;
}

interface TopBarContextType {
  navItems: NavItem[];
  topbarHeight: 'compact' | 'standard' | 'large';
  user: UserProfile | null;
  mounted: boolean;
  loading: boolean;
  refreshNavigation: () => Promise<void>;
  refreshUser: () => Promise<void>;
}

const TopBarContext = createContext<TopBarContextType | undefined>(undefined);

export const TopBarProvider = ({ children }: { children: ReactNode }) => {
  const [navItems, setNavItems] = useState<NavItem[]>([]);
  const [topbarHeight, setTopbarHeight] = useState<'compact' | 'standard' | 'large'>('standard');
  const [user, setUser] = useState<UserProfile | null>(null);
  const [mounted, setMounted] = useState(false);
  const [loading, setLoading] = useState(true);
  const [initialized, setInitialized] = useState(false);
  const isMountedRef = useRef(true);

  // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –° –¢–ê–ô–ú–ê–£–¢–û–ú
  useEffect(() => {
    let cleanup = false;
    isMountedRef.current = true;
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ StrictMode
    if (initialized) {
      console.log('üîÑ TopBarProvider: –ü—Ä–æ–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (—É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)');
      return;
    }
    
    console.log('üé® TopBarProvider: –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    const forceInitTimeout = setTimeout(() => {
      if (!cleanup && isMountedRef.current && !initialized) {
        console.warn('‚ö†Ô∏è TopBarProvider: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É');
        setFallbackNavigation();
        setMounted(true);
        setLoading(false);
        setInitialized(true);
      }
    }, 8000); // 8 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    
    const initialize = async () => {
      try {
        if (cleanup || !isMountedRef.current) return;
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        try {
          const { data: { session } } = await supabase.auth.getSession();
          if (session && !cleanup && isMountedRef.current) {
            await fetchUserProfile(session.user.id);
          }
        } catch (error) {
          console.warn('üé® TopBarProvider: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        }

        // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        if (!cleanup && isMountedRef.current) {
          try {
            await Promise.race([
              fetchNavItems(),
              new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Navigation timeout')), 5000)
              )
            ]);
          } catch (error) {
            console.warn('üé® TopBarProvider: –¢–∞–π–º–∞—É—Ç/–æ—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error);
            setFallbackNavigation();
          }
        }

        // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ø–±–∞—Ä–∞
        if (!cleanup && isMountedRef.current) {
          try {
            await Promise.race([
              fetchTopbarSettings(),
              new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Topbar settings timeout')), 3000)
              )
            ]);
          } catch (error) {
            console.warn('üé® TopBarProvider: –¢–∞–π–º–∞—É—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ–ø–±–∞—Ä–∞:', error);
          }
        }

        if (!cleanup && isMountedRef.current && !initialized) {
          setMounted(true);
          setLoading(false);
          setInitialized(true);
          console.log('‚úÖ TopBarProvider: –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }
      } catch (error) {
        console.error('‚ùå TopBarProvider: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        if (!cleanup && isMountedRef.current && !initialized) {
          setFallbackNavigation();
          setMounted(true);
          setLoading(false);
          setInitialized(true);
        }
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    initialize();

    return () => {
      cleanup = true;
      isMountedRef.current = false;
      clearTimeout(forceInitTimeout);
    };
  }, []); // –ü—É—Å—Ç—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  // –ü–û–î–ü–ò–°–ö–ê –ù–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Æ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
  useEffect(() => {
    if (!mounted) return;

    console.log('üîê TopBarProvider: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ auth —Å–æ–±—ã—Ç–∏—è...');
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
      if (!isMountedRef.current) return;
      
      console.log('üîê TopBarProvider: Auth —Å–æ–±—ã—Ç–∏–µ:', event);
      
      if (event === 'SIGNED_IN' && session) {
        await fetchUserProfile(session.user.id);
        toast.success('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
      } else if (event === 'SIGNED_OUT') {
        setUser(null);
        toast.success('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
      }
    });

    return () => {
      console.log('üîê TopBarProvider: –û—Ç–ø–∏—Å–∫–∞ –æ—Ç auth —Å–æ–±—ã—Ç–∏–π');
      subscription.unsubscribe();
    };
  }, [mounted]);

  // –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•
  const fetchUserProfile = async (userId: string) => {
    try {
      if (!isMountedRef.current) return;
      
      const { data: profile, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .single();

      const { data: { session } } = await supabase.auth.getSession();
      
      if (isMountedRef.current) {
        setUser({
          id: userId,
          email: session?.user.email || '',
          name: profile?.name || session?.user.user_metadata?.name,
          role: profile?.role,
          avatar: profile?.avatar
        });
      }
    } catch (error) {
      console.error('Error fetching user profile:', error);
    }
  };

  const fetchNavItems = async () => {
    try {
      if (!isMountedRef.current) return;
      
      console.log('üîÑ TopBarProvider: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–∑ API...');
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
      const response = await Promise.race([
        getNavigationItems(),
        new Promise<any>((_, reject) => 
          setTimeout(() => reject(new Error('Navigation API timeout')), 4000)
        )
      ]);
      
      if (response.data && response.data.length > 0 && isMountedRef.current) {
        const sortedItems = response.data.sort((a: any, b: any) => (a.order || 0) - (b.order || 0));
        setNavItems(sortedItems);
        console.log('‚úÖ TopBarProvider: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ API:', sortedItems.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
      } else if (isMountedRef.current) {
        console.log('‚ö†Ô∏è TopBarProvider: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞–≤–∏–≥–∞—Ü–∏—é');
        setFallbackNavigation();
      }
    } catch (error) {
      console.error('‚ùå Error fetching navigation:', error);
      if (isMountedRef.current) {
        console.log('‚ö†Ô∏è TopBarProvider: Fallback –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏/—Ç–∞–π–º–∞—É—Ç–∞ API');
        setFallbackNavigation();
      }
    }
  };

  const setFallbackNavigation = () => {
    const fallbackItems = [
      { id: 'home', label: '–ì–ª–∞–≤–Ω–∞—è', path: '/', visible: true, order: 0 },
      { id: 'events', label: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', path: '/events', visible: true, order: 1 },
      { id: 'courses', label: '–ö—É—Ä—Å—ã', path: '/courses', visible: true, order: 2 },
      { id: 'speakers', label: '–°–ø–∏–∫–µ—Ä—ã', path: '/speakers', visible: true, order: 3 },
      { id: 'coworking', label: '–ö–æ–≤–æ—Ä–∫–∏–Ω–≥', path: '/coworking', visible: true, order: 4 },
      { id: 'rent', label: '–ê—Ä–µ–Ω–¥–∞', path: '/rent', visible: true, order: 5 },
      { id: 'about', label: '–û –Ω–∞—Å', path: '/about', visible: true, order: 6 }
    ];
    setNavItems(fallbackItems);
    console.log('‚úÖ TopBarProvider: Fallback –Ω–∞–≤–∏–≥–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', fallbackItems.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
  };

  const fetchTopbarSettings = async () => {
    try {
      if (!isMountedRef.current) return;
      
      const response = await getTopbarSettings();
      if (response.data?.height && isMountedRef.current) {
        setTopbarHeight(response.data.height);
      }
    } catch (error) {
      console.error('Error fetching topbar settings:', error);
    }
  };

  // –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø
  const refreshNavigation = async () => {
    await fetchNavItems();
  };

  const refreshUser = async () => {
    const { data: { session } } = await supabase.auth.getSession();
    if (session) {
      await fetchUserProfile(session.user.id);
    }
  };

  const value: TopBarContextType = {
    navItems,
    topbarHeight,
    user,
    mounted,
    loading,
    refreshNavigation,
    refreshUser
  };

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const prevState = useRef({ navItemsCount: 0, user: false, mounted: false, loading: true });
  const currentState = { navItemsCount: navItems.length, user: !!user, mounted, loading };
  
  if (JSON.stringify(prevState.current) !== JSON.stringify(currentState)) {
    console.log('üé® TopBarProvider: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', currentState);
    prevState.current = currentState;
  }

  return (
    <TopBarContext.Provider value={value}>
      {children}
    </TopBarContext.Provider>
  );
};

export const useTopBar = (): TopBarContextType => {
  const context = useContext(TopBarContext);
  if (context === undefined) {
    throw new Error('useTopBar must be used within a TopBarProvider');
  }
  return context;
};