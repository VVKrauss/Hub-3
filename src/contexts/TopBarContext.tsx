// src/contexts/TopBarContext.tsx - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ auth —Å–æ–±—ã—Ç–∏–π
import { createContext, useContext, useState, useEffect, ReactNode, useRef } from 'react';
import { supabase } from '../lib/supabase';
import { getNavigationItems, getTopbarSettings } from '../api/settings';
import { toast } from 'react-hot-toast';

interface NavItem {
  id: string;
  label: string;
  path: string;
  visible: boolean;
  order: number;
  badge?: number;
}

interface UserProfile {
  id: string;
  email: string;
  name?: string;
  role?: string;
  avatar?: string;
}

interface TopBarContextType {
  navItems: NavItem[];
  topbarHeight: 'compact' | 'standard' | 'large';
  user: UserProfile | null;
  mounted: boolean;
  loading: boolean;
  refreshNavigation: () => Promise<void>;
  refreshUser: () => Promise<void>;
}

const TopBarContext = createContext<TopBarContextType | undefined>(undefined);

// –ö—ç—à –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const NAVIGATION_CACHE_KEY = 'topbar_navigation_cache';
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

const getNavigationFromCache = (): NavItem[] | null => {
  try {
    const cached = localStorage.getItem(NAVIGATION_CACHE_KEY);
    if (!cached) return null;
    
    const { data, timestamp } = JSON.parse(cached);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫—ç—à
    if (Date.now() - timestamp > CACHE_DURATION) {
      localStorage.removeItem(NAVIGATION_CACHE_KEY);
      return null;
    }
    
    return data;
  } catch {
    return null;
  }
};

const setNavigationToCache = (navItems: NavItem[]) => {
  try {
    const cacheData = {
      data: navItems,
      timestamp: Date.now()
    };
    localStorage.setItem(NAVIGATION_CACHE_KEY, JSON.stringify(cacheData));
  } catch (error) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ –∫—ç—à:', error);
  }
};

export const TopBarProvider = ({ children }: { children: ReactNode }) => {
  const [navItems, setNavItems] = useState<NavItem[]>([]);
  const [topbarHeight, setTopbarHeight] = useState<'compact' | 'standard' | 'large'>('standard');
  const [user, setUser] = useState<UserProfile | null>(null);
  const [mounted, setMounted] = useState(false);
  const [loading, setLoading] = useState(true);
  const [initialized, setInitialized] = useState(false);
  const isMountedRef = useRef(true);
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –±—ã–ª–∞ –ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  const wasAuthenticatedRef = useRef(false);
  const initialAuthCheckDone = useRef(false);

  // Fallback –Ω–∞–≤–∏–≥–∞—Ü–∏—è
  const fallbackNavigation = [
    { id: 'home', label: '–ì–ª–∞–≤–Ω–∞—è', path: '/', visible: true, order: 0 },
    { id: 'events', label: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', path: '/events', visible: true, order: 1 },
    { id: 'courses', label: '–ö—É—Ä—Å—ã', path: '/courses', visible: true, order: 2 },
    { id: 'speakers', label: '–°–ø–∏–∫–µ—Ä—ã', path: '/speakers', visible: true, order: 3 },
    { id: 'coworking', label: '–ö–æ–≤–æ—Ä–∫–∏–Ω–≥', path: '/coworking', visible: true, order: 4 },
    { id: 'rent', label: '–ê—Ä–µ–Ω–¥–∞', path: '/rent', visible: true, order: 5 },
    { id: 'about', label: '–û –Ω–∞—Å', path: '/about', visible: true, order: 6 }
  ];

  // –ë–´–°–¢–†–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
  useEffect(() => {
    let cleanup = false;
    isMountedRef.current = true;
    
    if (initialized) {
      console.log('üîÑ TopBarProvider: –ü—Ä–æ–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
      return;
    }
    
    console.log('üé® TopBarProvider: –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
    
    const quickInit = async () => {
      try {
        // 1. –°—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        const cachedNav = getNavigationFromCache();
        if (cachedNav && cachedNav.length > 0) {
          console.log('‚úÖ TopBarProvider: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫—ç—à–∞:', cachedNav.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
          setNavItems(cachedNav);
        } else {
          console.log('‚ö†Ô∏è TopBarProvider: –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞–≤–∏–≥–∞—Ü–∏—é');
          setNavItems(fallbackNavigation);
          setNavigationToCache(fallbackNavigation);
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–±—ã—Å—Ç—Ä–æ)
        if (!cleanup && isMountedRef.current) {
          try {
            const { data: { session } } = await Promise.race([
              supabase.auth.getSession(),
              new Promise((_, reject) => setTimeout(() => reject(new Error('Auth timeout')), 2000))
            ]);
            
            if (session && session.user) {
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
              wasAuthenticatedRef.current = true;
              
              // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ñ–æ–Ω–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è UI
              fetchUserProfile(session.user.id, true); // true = —ç—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            }
            
            initialAuthCheckDone.current = true;
          } catch (error) {
            console.warn('üé® TopBarProvider: –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            initialAuthCheckDone.current = true;
          }
        }

        // 3. –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if (!cleanup && isMountedRef.current) {
          setMounted(true);
          setLoading(false);
          setInitialized(true);
          console.log('‚úÖ TopBarProvider: –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }

        // 4. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∫—ç—à–∞)
        if (!cachedNav && !cleanup && isMountedRef.current) {
          fetchNavItemsInBackground();
        }

      } catch (error) {
        console.error('‚ùå TopBarProvider: –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        if (!cleanup && isMountedRef.current) {
          setNavItems(fallbackNavigation);
          setMounted(true);
          setLoading(false);
          setInitialized(true);
        }
      }
    };

    quickInit();

    return () => {
      cleanup = true;
      isMountedRef.current = false;
    };
  }, []);

  // –ü–û–î–ü–ò–°–ö–ê –ù–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Æ (—Å —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–±—ã—Ç–∏–π)
  useEffect(() => {
    if (!mounted) return;

    console.log('üîê TopBarProvider: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ auth —Å–æ–±—ã—Ç–∏—è...');
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
      if (!isMountedRef.current) return;
      
      console.log('üîê TopBarProvider: Auth —Å–æ–±—ã—Ç–∏–µ:', event, 'wasAuthenticated:', wasAuthenticatedRef.current);
      
      switch (event) {
        case 'INITIAL_SESSION':
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é - –æ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ quickInit
          break;
          
        case 'SIGNED_IN':
          if (session?.user) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º: —ç—Ç–æ –Ω–æ–≤—ã–π –≤—Ö–æ–¥ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏?
            const isNewSignIn = !wasAuthenticatedRef.current && initialAuthCheckDone.current;
            
            await fetchUserProfile(session.user.id, false); // false = –Ω–µ –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –Ω–æ–≤–æ–º –≤—Ö–æ–¥–µ
            if (isNewSignIn) {
              toast.success('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
              console.log('üîê TopBarProvider: –ù–æ–≤—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
            } else {
              console.log('üîê TopBarProvider: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏');
            }
            
            wasAuthenticatedRef.current = true;
          }
          break;
          
        case 'SIGNED_OUT':
          setUser(null);
          wasAuthenticatedRef.current = false;
          toast.success('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
          console.log('üîê TopBarProvider: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
          break;
          
        case 'TOKEN_REFRESHED':
          console.log('üîê TopBarProvider: –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω');
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏–∫–∞–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
          break;
          
        default:
          console.log('üîê TopBarProvider: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:', event);
      }
    });

    return () => {
      console.log('üîê TopBarProvider: –û—Ç–ø–∏—Å–∫–∞ –æ—Ç auth —Å–æ–±—ã—Ç–∏–π');
      subscription.unsubscribe();
    };
  }, [mounted]);

  // –§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const fetchNavItemsInBackground = async () => {
    try {
      console.log('üîÑ TopBarProvider: –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
      
      const response = await Promise.race([
        getNavigationItems(),
        new Promise<any>((_, reject) => 
          setTimeout(() => reject(new Error('Background nav timeout')), 10000)
        )
      ]);
      
      if (response.data && response.data.length > 0 && isMountedRef.current) {
        const sortedItems = response.data.sort((a: any, b: any) => (a.order || 0) - (b.order || 0));
        setNavItems(sortedItems);
        setNavigationToCache(sortedItems);
        console.log('‚úÖ TopBarProvider: –ù–∞–≤–∏–≥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ:', sortedItems.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è TopBarProvider: –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
      // –ù–µ –º–µ–Ω—è–µ–º navItems –ø—Ä–∏ –æ—à–∏–±–∫–µ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const fetchUserProfile = async (userId: string, isInitial: boolean = false) => {
    try {
      if (!isMountedRef.current) return;
      
      const { data: profile, error } = await Promise.race([
        supabase.from('profiles').select('*').eq('id', userId).single(),
        new Promise<any>((_, reject) => 
          setTimeout(() => reject(new Error('Profile timeout')), 5000)
        )
      ]);

      if (error) {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      }

      const { data: { session } } = await supabase.auth.getSession();
      
      if (isMountedRef.current) {
        const userData = {
          id: userId,
          email: session?.user.email || '',
          name: profile?.name || session?.user.user_metadata?.name,
          role: profile?.role,
          avatar: profile?.avatar
        };
        
        setUser(userData);
        
        if (isInitial) {
          console.log('üîê TopBarProvider: –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', userData.email);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  };

  // –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´
  const refreshNavigation = async () => {
    // –û—á–∏—â–∞–µ–º –∫—ç—à –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
    localStorage.removeItem(NAVIGATION_CACHE_KEY);
    await fetchNavItemsInBackground();
  };

  const refreshUser = async () => {
    const { data: { session } } = await supabase.auth.getSession();
    if (session) {
      await fetchUserProfile(session.user.id, false);
    }
  };

  const value: TopBarContextType = {
    navItems,
    topbarHeight,
    user,
    mounted,
    loading,
    refreshNavigation,
    refreshUser
  };

  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  const prevStateRef = useRef({ navItemsCount: 0, user: false, mounted: false, loading: true });
  const currentState = { navItemsCount: navItems.length, user: !!user, mounted, loading };
  
  if (JSON.stringify(prevStateRef.current) !== JSON.stringify(currentState)) {
    console.log('üé® TopBarProvider: –°–æ—Å—Ç–æ—è–Ω–∏–µ:', currentState);
    prevStateRef.current = currentState;
  }

  return (
    <TopBarContext.Provider value={value}>
      {children}
    </TopBarContext.Provider>
  );
};

export const useTopBar = (): TopBarContextType => {
  const context = useContext(TopBarContext);
  if (context === undefined) {
    throw new Error('useTopBar must be used within a TopBarProvider');
  }
  return context;
};