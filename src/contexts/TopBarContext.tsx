// src/contexts/TopBarContext.tsx - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { createContext, useContext, useState, useEffect, useRef, ReactNode } from 'react';
import { supabase } from '../lib/supabase';
import { useAuth } from './AuthContext';
import { getNavigationItems } from '../api/settings';
import { toast } from 'react-hot-toast';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
export interface NavigationItem {
  id: string;
  label: string;
  path: string;
  icon?: string;
  visible: boolean;
  order: number;
}

export interface TopBarUser {
  id: string;
  email: string;
  name?: string;
  role?: string;
  avatar?: string;
}

interface TopBarContextType {
  navItems: NavigationItem[];
  topbarHeight: string;
  user: TopBarUser | null;
  mounted: boolean;
  loading: boolean;
  refreshNavigation: () => Promise<void>;
  refreshUser: () => Promise<void>;
}

const TopBarContext = createContext<TopBarContextType | undefined>(undefined);

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const NAVIGATION_CACHE_KEY = 'navigation_cache';
const CACHE_DURATION = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

// Fallback –Ω–∞–≤–∏–≥–∞—Ü–∏—è
const fallbackNavigation: NavigationItem[] = [
  { id: '1', label: '–ì–ª–∞–≤–Ω–∞—è', path: '/', visible: true, order: 1 },
  { id: '2', label: '–°–æ–±—ã—Ç–∏—è', path: '/events', visible: true, order: 2 },
  { id: '3', label: '–ö—É—Ä—Å—ã', path: '/courses', visible: true, order: 3 },
  { id: '4', label: '–°–ø–∏–∫–µ—Ä—ã', path: '/speakers', visible: true, order: 4 },
  { id: '5', label: '–ê—Ä–µ–Ω–¥–∞', path: '/rent', visible: true, order: 5 },
  { id: '6', label: '–ö–æ–≤–æ—Ä–∫–∏–Ω–≥', path: '/coworking', visible: true, order: 6 },
  { id: '7', label: '–û –Ω–∞—Å', path: '/about', visible: true, order: 7 }
];

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫—ç—à–∞
const getNavigationFromCache = (): NavigationItem[] | null => {
  try {
    const cached = localStorage.getItem(NAVIGATION_CACHE_KEY);
    if (cached) {
      const { data, timestamp } = JSON.parse(cached);
      if (Date.now() - timestamp < CACHE_DURATION) {
        return data;
      }
    }
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
  }
  return null;
};

const setNavigationToCache = (data: NavigationItem[]) => {
  try {
    localStorage.setItem(NAVIGATION_CACHE_KEY, JSON.stringify({
      data,
      timestamp: Date.now()
    }));
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
  }
};

export const TopBarProvider = ({ children }: { children: ReactNode }) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const [navItems, setNavItems] = useState<NavigationItem[]>(fallbackNavigation);
  const [topbarHeight] = useState('normal');
  const [user, setUser] = useState<TopBarUser | null>(null);
  const [mounted, setMounted] = useState(false);
  const [loading, setLoading] = useState(true);
  
  // Refs –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  const isMountedRef = useRef(true);
  const initializationCompleted = useRef(false);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ AuthContext –≤–º–µ—Å—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
  const { user: authUser, loading: authLoading, isQuickReturn } = useAuth();

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å AuthContext
  useEffect(() => {
    if (!authLoading && !isQuickReturn) {
      if (authUser) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ AuthContext, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        fetchUserProfile(authUser.id);
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ AuthContext, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ
        setUser(null);
      }
    }
  }, [authUser, authLoading, isQuickReturn]);

  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–¢–û–õ–¨–ö–û –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
  useEffect(() => {
    let cleanup = false;

    const quickInit = async () => {
      try {
        console.log('üé® TopBarProvider: –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');

        // 1. –°—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        const cachedNav = getNavigationFromCache();
        if (cachedNav && cachedNav.length > 0) {
          console.log('‚úÖ TopBarProvider: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫—ç—à–∞:', cachedNav.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
          setNavItems(cachedNav);
        } else {
          console.log('‚ö†Ô∏è TopBarProvider: –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞–≤–∏–≥–∞—Ü–∏—é');
          setNavItems(fallbackNavigation);
          setNavigationToCache(fallbackNavigation);
        }

        // 2. –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if (!cleanup && isMountedRef.current) {
          setMounted(true);
          setLoading(false);
          initializationCompleted.current = true;
          console.log('‚úÖ TopBarProvider: –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }

        // 3. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∫—ç—à–∞)
        if (!cachedNav && !cleanup && isMountedRef.current) {
          fetchNavItemsInBackground();
        }

      } catch (error) {
        console.error('‚ùå TopBarProvider: –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        if (!cleanup && isMountedRef.current) {
          setNavItems(fallbackNavigation);
          setMounted(true);
          setLoading(false);
          initializationCompleted.current = true;
        }
      }
    };

    quickInit();

    return () => {
      cleanup = true;
      isMountedRef.current = false;
    };
  }, []);

  // –§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const fetchNavItemsInBackground = async () => {
    try {
      console.log('üîÑ TopBarProvider: –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
      
      const response = await Promise.race([
        getNavigationItems(),
        new Promise<any>((_, reject) => 
          setTimeout(() => reject(new Error('Navigation timeout')), 8000)
        )
      ]);
      
      if (response.data && response.data.length > 0 && isMountedRef.current) {
        const sortedItems = response.data.sort((a: any, b: any) => (a.order || 0) - (b.order || 0));
        setNavItems(sortedItems);
        setNavigationToCache(sortedItems);
        console.log('‚úÖ TopBarProvider: –ù–∞–≤–∏–≥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ:', sortedItems.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è TopBarProvider: –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
      // –ù–µ –º–µ–Ω—è–µ–º navItems –ø—Ä–∏ –æ—à–∏–±–∫–µ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const fetchUserProfile = async (userId: string) => {
    try {
      if (!isMountedRef.current) return;
      
      const { data: profile, error } = await Promise.race([
        supabase.from('profiles').select('*').eq('id', userId).single(),
        new Promise<any>((_, reject) => 
          setTimeout(() => reject(new Error('Profile timeout')), 5000)
        )
      ]);

      if (error && error.code !== 'PGRST116') { // PGRST116 = –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
        console.warn('‚ö†Ô∏è TopBarProvider: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      }

      if (isMountedRef.current && authUser) {
        setUser({
          id: userId,
          email: authUser.email,
          name: profile?.name || authUser.name,
          role: profile?.role,
          avatar: profile?.avatar
        });
        console.log('‚úÖ TopBarProvider: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è TopBarProvider: –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ AuthContext
      if (isMountedRef.current && authUser) {
        setUser({
          id: authUser.id,
          email: authUser.email,
          name: authUser.name,
          role: undefined,
          avatar: undefined
        });
      }
    }
  };

  // –ü–û–î–ü–ò–°–ö–ê –ù–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Æ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
  useEffect(() => {
    if (!mounted) return;

    console.log('üîê TopBarProvider: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ auth —Å–æ–±—ã—Ç–∏—è...');
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
      if (!isMountedRef.current) return;
      
      console.log('üîê TopBarProvider: Auth —Å–æ–±—ã—Ç–∏–µ:', event);
      
      if (event === 'SIGNED_IN' && session) {
        // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ AuthContext
        toast.success('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
      } else if (event === 'SIGNED_OUT') {
        setUser(null);
        toast.success('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
      }
    });

    return () => {
      console.log('üîê TopBarProvider: –û—Ç–ø–∏—Å–∫–∞ –æ—Ç auth —Å–æ–±—ã—Ç–∏–π');
      subscription.unsubscribe();
    };
  }, [mounted]);

  // –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´
  const refreshNavigation = async () => {
    console.log('üîÑ TopBarProvider: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
    localStorage.removeItem(NAVIGATION_CACHE_KEY);
    await fetchNavItemsInBackground();
  };

  const refreshUser = async () => {
    console.log('üîÑ TopBarProvider: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    if (authUser) {
      await fetchUserProfile(authUser.id);
    }
  };

  const value: TopBarContextType = {
    navItems,
    topbarHeight,
    user,
    mounted,
    loading,
    refreshNavigation,
    refreshUser
  };

  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const prevStateRef = useRef({ navItemsCount: 0, user: false, mounted: false, loading: true });
  const currentState = { navItemsCount: navItems.length, user: !!user, mounted, loading };
  
  if (JSON.stringify(prevStateRef.current) !== JSON.stringify(currentState)) {
    console.log('üé® TopBarProvider: –°–æ—Å—Ç–æ—è–Ω–∏–µ:', currentState);
    prevStateRef.current = currentState;
  }

  return (
    <TopBarContext.Provider value={value}>
      {children}
    </TopBarContext.Provider>
  );
};

export const useTopBar = (): TopBarContextType => {
  const context = useContext(TopBarContext);
  if (context === undefined) {
    throw new Error('useTopBar must be used within a TopBarProvider');
  }
  return context;
};