// src/contexts/AuthContext.tsx
import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { supabase, getStoredSession, clearStoredSession } from '../lib/supabase';
import { User as SupabaseUser } from '@supabase/supabase-js';

type User = {
  id: string;
  email: string;
  name?: string;
} | null;

type AuthContextType = {
  user: User;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<void>;
  signUp: (email: string, password: string, name: string) => Promise<void>;
  signOut: () => Promise<void>;
  resetPassword: (email: string) => Promise<void>;
};

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let mounted = true;

    const initializeAuth = async () => {
      console.log('üîê AuthProvider: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      
      try {
        // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        const storedSession = getStoredSession();
        console.log('üîê AuthProvider: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è:', !!storedSession);

        // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∏–∑ Supabase
        const { data: { session }, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error('üîê AuthProvider: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
          // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
          clearStoredSession();
          if (mounted) {
            setUser(null);
            setLoading(false);
          }
          return;
        }

        console.log('üîê AuthProvider: –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:', !!session);

        if (mounted) {
          if (session?.user) {
            const userData: User = {
              id: session.user.id,
              email: session.user.email || '',
              name: session.user.user_metadata?.name
            };
            setUser(userData);
            console.log('üîê AuthProvider: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', userData.email);
          } else {
            setUser(null);
            console.log('üîê AuthProvider: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }
          setLoading(false);
        }
      } catch (error) {
        console.error('üîê AuthProvider: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        // –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        clearStoredSession();
        if (mounted) {
          setUser(null);
          setLoading(false);
        }
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    initializeAuth();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('üîê AuthProvider: Auth —Å–æ–±—ã—Ç–∏–µ:', event);
        
        if (!mounted) return;

        switch (event) {
          case 'INITIAL_SESSION':
            // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ initializeAuth
            break;
            
          case 'SIGNED_IN':
            if (session?.user) {
              const userData: User = {
                id: session.user.id,
                email: session.user.email || '',
                name: session.user.user_metadata?.name
              };
              setUser(userData);
              console.log('üîê AuthProvider: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª:', userData.email);
            }
            setLoading(false);
            break;
            
          case 'SIGNED_OUT':
            setUser(null);
            clearStoredSession();
            console.log('üîê AuthProvider: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª');
            setLoading(false);
            break;
            
          case 'TOKEN_REFRESHED':
            console.log('üîê AuthProvider: –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω');
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–ª—Å—è —Ç–æ–∫–µ–Ω
            break;
            
          case 'USER_UPDATED':
            if (session?.user) {
              const userData: User = {
                id: session.user.id,
                email: session.user.email || '',
                name: session.user.user_metadata?.name
              };
              setUser(userData);
              console.log('üîê AuthProvider: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            }
            break;
            
          default:
            console.log('üîê AuthProvider: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:', event);
        }
      }
    );

    // Cleanup function
    return () => {
      mounted = false;
      subscription.unsubscribe();
      console.log('üîê AuthProvider: –û—Ç–ø–∏—Å–∫–∞ –æ—Ç auth —Å–æ–±—ã—Ç–∏–π');
    };
  }, []);

  const signIn = async (email: string, password: string) => {
    console.log('üîê AuthProvider: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è:', email);
    const { error } = await supabase.auth.signInWithPassword({ 
      email, 
      password 
    });
    
    if (error) {
      console.error('üîê AuthProvider: –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      throw error;
    }
    
    console.log('üîê AuthProvider: –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω');
  };

  const signUp = async (email: string, password: string, name: string) => {
    console.log('üîê AuthProvider: –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è:', email);
    const { error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: { name },
        emailRedirectTo: `${window.location.origin}/auth/callback`
      }
    });
    
    if (error) {
      console.error('üîê AuthProvider: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
    
    console.log('üîê AuthProvider: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
  };

  const signOut = async () => {
    console.log('üîê AuthProvider: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    const { error } = await supabase.auth.signOut();
    
    if (error) {
      console.error('üîê AuthProvider: –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
      throw error;
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    clearStoredSession();
    setUser(null);
    console.log('üîê AuthProvider: –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
  };

  const resetPassword = async (email: string) => {
    console.log('üîê AuthProvider: –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è:', email);
    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: `${window.location.origin}/reset-password`,
    });
    
    if (error) {
      console.error('üîê AuthProvider: –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
      throw error;
    }
    
    console.log('üîê AuthProvider: –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  };

  return (
    <AuthContext.Provider value={{ 
      user, 
      loading, 
      signIn, 
      signUp, 
      signOut, 
      resetPassword 
    }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};