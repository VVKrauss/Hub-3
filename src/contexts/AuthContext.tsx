// src/contexts/AuthContext.tsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø (—É–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
import { createContext, useContext, useState, useEffect, ReactNode, useRef } from 'react';
import { supabase, getStoredSession, clearStoredSession } from '../lib/supabase';
import { User as SupabaseUser } from '@supabase/supabase-js';

type User = {
  id: string;
  email: string;
  name?: string;
} | null;

type AuthContextType = {
  user: User;
  loading: boolean;
  isQuickReturn: boolean;
  signIn: (email: string, password: string) => Promise<void>;
  signUp: (email: string, password: string, name: string) => Promise<void>;
  signOut: () => Promise<void>;
  resetPassword: (email: string) => Promise<void>;
  forceQuickCheck: () => Promise<void>;
};

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User>(null);
  const [loading, setLoading] = useState(true);
  const [isQuickReturn, setIsQuickReturn] = useState(false);
  
  // Refs –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  const mounted = useRef(true);
  const initializationCompleted = useRef(false);
  const lastInitTime = useRef(Date.now());
  const quickCheckInProgress = useRef(false);

  useEffect(() => {
    mounted.current = true;
    initializationCompleted.current = false;

    const initializeAuth = async (isTabReturn = false) => {
      // –ò–∑–±–µ–≥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
      if (quickCheckInProgress.current) {
        console.log('üîê AuthProvider: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return;
      }

      const timeSinceLastInit = Date.now() - lastInitTime.current;
      
      // –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∏ –ø—Ä–æ—à–ª–æ –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ - –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      if (isTabReturn && timeSinceLastInit < 60000) { // 1 –º–∏–Ω—É—Ç–∞
        console.log('üîê AuthProvider: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É');
        setIsQuickReturn(true);
        await performQuickCheck();
        return;
      }

      console.log('üîê AuthProvider: –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      setIsQuickReturn(false);
      quickCheckInProgress.current = true;
      
      try {
        // 1. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
        const storedSession = getStoredSession();
        console.log('üîê AuthProvider: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è:', !!storedSession);

        // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        const sessionPromise = supabase.auth.getSession();
        const timeoutPromise = new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Session check timeout')), 
            isTabReturn ? 3000 : 8000) // –ë—ã—Å—Ç—Ä–µ–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
        );

        const { data: { session }, error } = await Promise.race([
          sessionPromise, 
          timeoutPromise
        ]) as any;
        
        if (error) {
          console.error('üîê AuthProvider: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
          await handleSessionError();
          return;
        }

        console.log('üîê AuthProvider: –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:', !!session);

        if (mounted.current && !initializationCompleted.current) {
          if (session?.user) {
            const userData: User = {
              id: session.user.id,
              email: session.user.email || '',
              name: session.user.user_metadata?.name
            };
            setUser(userData);
            console.log('üîê AuthProvider: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', userData.email);
          } else {
            setUser(null);
            console.log('üîê AuthProvider: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }
          
          setLoading(false);
          setIsQuickReturn(false);
          initializationCompleted.current = true;
          lastInitTime.current = Date.now();
        }

      } catch (error) {
        console.error('üîê AuthProvider: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        await handleSessionError();
      } finally {
        quickCheckInProgress.current = false;
      }
    };

    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
    const performQuickCheck = async () => {
      try {
        // –°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞
        const cachedSessionStr = localStorage.getItem('sb-auth-token');
        if (cachedSessionStr) {
          const cachedSession = JSON.parse(cachedSessionStr);
          if (cachedSession && cachedSession.expires_at) {
            const expiresAt = new Date(cachedSession.expires_at).getTime();
            const now = Date.now();
            
            // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –Ω–∞ 5+ –º–∏–Ω—É—Ç
            if (expiresAt > now + 300000) {
              console.log('‚úÖ AuthProvider: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω');
              setLoading(false);
              setIsQuickReturn(false);
              return;
            }
          }
        }

        // –ï—Å–ª–∏ –∫—ç—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        const { data: { session } } = await Promise.race([
          supabase.auth.getSession(),
          new Promise((_, reject) => setTimeout(() => reject(new Error('Quick timeout')), 2000))
        ]) as any;

        if (session?.user && mounted.current) {
          const userData: User = {
            id: session.user.id,
            email: session.user.email || '',
            name: session.user.user_metadata?.name
          };
          setUser(userData);
        }

        setLoading(false);
        setIsQuickReturn(false);
        console.log('‚úÖ AuthProvider: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

      } catch (error) {
        console.warn('‚ö†Ô∏è AuthProvider: –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ª–Ω–æ–π:', error);
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await initializeAuth(false);
      }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Å—Å–∏–∏
    const handleSessionError = async () => {
      clearStoredSession();
      if (mounted.current && !initializationCompleted.current) {
        setUser(null);
        setLoading(false);
        setIsQuickReturn(false);
        initializationCompleted.current = true;
      }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible' && initializationCompleted.current) {
        console.log('üëÅÔ∏è AuthProvider: –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π');
        const timeSinceLastInit = Date.now() - lastInitTime.current;
        
        // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 2 –º–∏–Ω—É—Ç - –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º
        if (timeSinceLastInit > 120000) {
          console.log('üîÑ AuthProvider: –î–∞–≤–Ω–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏—Å—å, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
          initializeAuth(true);
        }
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    initializeAuth();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó)
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('üîê AuthProvider: Auth —Å–æ–±—ã—Ç–∏–µ:', event);
        
        if (!mounted.current) return;

        switch (event) {
          case 'INITIAL_SESSION':
            // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ initializeAuth
            break;
            
          case 'SIGNED_IN':
            if (session?.user) {
              const userData: User = {
                id: session.user.id,
                email: session.user.email || '',
                name: session.user.user_metadata?.name
              };
              setUser(userData);
              setLoading(false);
              console.log('üîê AuthProvider: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª:', userData.email);
              // –£–ë–†–ê–õ–ò toast –æ—Ç—Å—é–¥–∞ - –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –≤ TopBarContext
            }
            break;
            
          case 'SIGNED_OUT':
            setUser(null);
            clearStoredSession();
            setLoading(false);
            console.log('üîê AuthProvider: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª');
            // –£–ë–†–ê–õ–ò toast –æ—Ç—Å—é–¥–∞ - –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –≤ TopBarContext
            break;
            
          case 'TOKEN_REFRESHED':
            console.log('üîê AuthProvider: –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω');
            lastInitTime.current = Date.now();
            break;
            
          case 'USER_UPDATED':
            if (session?.user && mounted.current) {
              const userData: User = {
                id: session.user.id,
                email: session.user.email || '',
                name: session.user.user_metadata?.name
              };
              setUser(userData);
              console.log('üîê AuthProvider: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            }
            break;
        }
      }
    );

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ (debounced)
    let visibilityTimeout: NodeJS.Timeout;
    const debouncedVisibilityChange = () => {
      clearTimeout(visibilityTimeout);
      visibilityTimeout = setTimeout(handleVisibilityChange, 500);
    };
    
    document.addEventListener('visibilitychange', debouncedVisibilityChange);

    // Cleanup
    return () => {
      mounted.current = false;
      subscription.unsubscribe();
      document.removeEventListener('visibilitychange', debouncedVisibilityChange);
      clearTimeout(visibilityTimeout);
      console.log('üîê AuthProvider: Cleanup –∑–∞–≤–µ—Ä—à–µ–Ω');
    };
  }, []);

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  const signIn = async (email: string, password: string) => {
    console.log('üîê AuthProvider: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è:', email);
    const { error } = await supabase.auth.signInWithPassword({ 
      email, 
      password 
    });
    
    if (error) {
      console.error('üîê AuthProvider: –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      throw error;
    }
    
    console.log('üîê AuthProvider: –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω');
  };

  const signUp = async (email: string, password: string, name: string) => {
    console.log('üîê AuthProvider: –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è:', email);
    const { error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: { name },
        emailRedirectTo: `${window.location.origin}/auth/callback`
      }
    });
    
    if (error) {
      console.error('üîê AuthProvider: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
    
    console.log('üîê AuthProvider: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
  };

  const signOut = async () => {
    console.log('üîê AuthProvider: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    const { error } = await supabase.auth.signOut();
    
    if (error) {
      console.error('üîê AuthProvider: –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
      throw error;
    }
    
    clearStoredSession();
    setUser(null);
    console.log('üîê AuthProvider: –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
  };

  const resetPassword = async (email: string) => {
    console.log('üîê AuthProvider: –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è:', email);
    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: `${window.location.origin}/reset-password`,
    });
    
    if (error) {
      console.error('üîê AuthProvider: –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
      throw error;
    }
    
    console.log('üîê AuthProvider: –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  };

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  const forceQuickCheck = async () => {
    if (quickCheckInProgress.current) return;
    
    console.log('üîê AuthProvider: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
    setIsQuickReturn(true);
    setLoading(true);
    await performQuickCheck();
  };

  return (
    <AuthContext.Provider value={{ 
      user, 
      loading, 
      isQuickReturn,
      signIn, 
      signUp, 
      signOut, 
      resetPassword,
      forceQuickCheck
    }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};