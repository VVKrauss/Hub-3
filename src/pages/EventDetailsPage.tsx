// src/pages/EventDetailsPage.tsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –±–µ–∑ –¥—ë—Ä–≥–∞–Ω—å—è
import { useState, useEffect, useCallback, useMemo } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import { 
  Calendar, 
  Clock, 
  MapPin, 
  Users, 
  ArrowLeft,
  ExternalLink,
  Globe,
  DollarSign,
  Tag,
  ChevronLeft,
  ChevronRight,
  X,
  User,
} from 'lucide-react';
import Layout from '../components/layout/Layout';
import { useAuth } from '../contexts/AuthContext';
import { useFavoriteEvents } from '../hooks/useFavorites';
import FavoriteButton from '../components/favorites/FavoriteButton';
import RegistrationModal from '../components/events/RegistrationModal';
import { getEventById } from '../api/events';
import { UnifiedLoadingPageWrapper } from '../components/ui/UnifiedLoading';
import type { EventWithDetails } from '../types/database';
import { formatRussianDate, formatTimeFromTimestamp } from '../utils/dateTimeUtils';
import { getSupabaseImageUrl } from '../utils/imageUtils';

const EventDetailsPage = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { user } = useAuth();
  
  // üéØ –ï–î–ò–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ - –∫–ª—é—á –∫ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã
  const [pageState, setPageState] = useState<{
    event: EventWithDetails | null;
    loading: boolean;
    error: string | null;
    isRegistering: boolean;
    showGallery: boolean;
    selectedImage: number;
  }>({
    event: null,
    loading: true,
    error: null,
    isRegistering: false,
    showGallery: false,
    selectedImage: 0
  });

  // –•—É–∫–∏ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const { 
    toggleFavoriteEvent, 
    isFavoriteEvent, 
    loading: favLoading 
  } = useFavoriteEvents(user?.id);

  // üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –µ–¥–∏–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  const fetchEvent = useCallback(async (eventId: string) => {
    try {
      // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–æ–∞–¥–µ—Ä—ã
      setPageState(prev => ({ 
        ...prev, 
        loading: true, 
        error: null 
      }));

      console.log('Fetching event:', eventId);
      
      const result = await getEventById(eventId);
      
      if (result.error) {
        throw new Error(result.error);
      }

      if (!result.data) {
        throw new Error('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }

      console.log('Event loaded successfully:', result.data);
      
      // ‚úÖ –ï–î–ò–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑ –¥—ë—Ä–≥–∞–Ω—å—è
      setPageState(prev => ({
        ...prev,
        event: result.data,
        loading: false,
        error: null
      }));

    } catch (err: any) {
      console.error('Error fetching event:', err);
      setPageState(prev => ({
        ...prev,
        loading: false,
        error: err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
      }));
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ ID
  useEffect(() => {
    if (id) {
      fetchEvent(id);
    }
  }, [id, fetchEvent]);

  // üé® –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const eventImages = useMemo(() => {
    if (!pageState.event) return [];
    
    const images = [];
    
    if (pageState.event.cover_image_url) {
      images.push(pageState.event.cover_image_url);
    }
    
    if (pageState.event.gallery_images && pageState.event.gallery_images.length > 0) {
      images.push(...pageState.event.gallery_images);
    }
    
    return images.map(url => 
      url.startsWith('http') ? url : getSupabaseImageUrl(url)
    );
  }, [pageState.event]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–∞–ª–µ—Ä–µ–∏
  const openGallery = useCallback((imageIndex: number) => {
    setPageState(prev => ({
      ...prev,
      showGallery: true,
      selectedImage: imageIndex
    }));
  }, []);

  const closeGallery = useCallback(() => {
    setPageState(prev => ({
      ...prev,
      showGallery: false
    }));
  }, []);

  const nextImage = useCallback(() => {
    setPageState(prev => ({
      ...prev,
      selectedImage: (prev.selectedImage + 1) % eventImages.length
    }));
  }, [eventImages.length]);

  const prevImage = useCallback(() => {
    setPageState(prev => ({
      ...prev,
      selectedImage: prev.selectedImage === 0 ? eventImages.length - 1 : prev.selectedImage - 1
    }));
  }, [eventImages.length]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const openRegistration = useCallback(() => {
    setPageState(prev => ({ ...prev, isRegistering: true }));
  }, []);

  const closeRegistration = useCallback(() => {
    setPageState(prev => ({ ...prev, isRegistering: false }));
  }, []);

  // üéØ –ï–î–ò–ù–´–ô –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö
  return (
    <Layout disablePageTransition={true}>
      <UnifiedLoadingPageWrapper
        loading={pageState.loading}
        error={pageState.error}
        loadingText="–ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ..."
      >
        {pageState.event && (
          <div className="animate-fade-in">
            {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" */}
            <div className="bg-white dark:bg-dark-900 sticky top-16 z-30 border-b border-gray-200 dark:border-dark-700">
              <div className="max-w-7xl mx-auto px-4 py-3">
                <button
                  onClick={() => navigate(-1)}
                  className="flex items-center text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors"
                >
                  <ArrowLeft className="h-5 w-5 mr-2" />
                  –ù–∞–∑–∞–¥
                </button>
              </div>
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
            {eventImages.length > 0 && (
              <div className="relative h-96 md:h-[500px] overflow-hidden">
                <img
                  src={eventImages[0]}
                  alt={pageState.event.title}
                  className="w-full h-full object-cover cursor-pointer"
                  onClick={() => openGallery(0)}
                  loading="eager" // –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ä–∞–∑—É
                />
                <div className="absolute inset-0 bg-black bg-opacity-40" />
                
                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–≤–µ—Ä—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                <div className="absolute bottom-0 left-0 right-0 p-6 md:p-8">
                  <div className="max-w-7xl mx-auto flex justify-between items-end">
                    <div className="text-white">
                      <h1 className="text-3xl md:text-5xl font-bold mb-4">
                        {pageState.event.title}
                      </h1>
                      {pageState.event.short_description && (
                        <p className="text-lg text-gray-200 max-w-3xl">
                          {pageState.event.short_description}
                        </p>
                      )}
                    </div>
                    {user && (
                      <FavoriteButton
                        eventId={pageState.event.id}
                        isFavorite={isFavoriteEvent(pageState.event.id)}
                        onToggle={() => toggleFavoriteEvent(pageState.event.id)}
                        loading={favLoading}
                        className="bg-white/20 backdrop-blur-sm"
                      />
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
            <div className="max-w-7xl mx-auto px-4 py-8">
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                <div className="lg:col-span-2 space-y-8">
                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ */}
                  <div className="bg-white dark:bg-dark-800 rounded-xl shadow-lg p-6">
                    <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">
                      –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
                    </h2>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      {/* –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è */}
                      <div className="flex items-start space-x-3">
                        <div className="flex-shrink-0 w-10 h-10 bg-primary-100 dark:bg-primary-900/30 rounded-lg flex items-center justify-center">
                          <Calendar className="w-5 h-5 text-primary-600 dark:text-primary-400" />
                        </div>
                        <div>
                          <p className="font-medium text-gray-900 dark:text-white">
                            {formatRussianDate(pageState.event.start_at)}
                          </p>
                          <p className="text-gray-600 dark:text-gray-400">
                            {formatTimeFromTimestamp(pageState.event.start_at)} - {formatTimeFromTimestamp(pageState.event.end_at)}
                          </p>
                        </div>
                      </div>

                      {/* –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è */}
                      <div className="flex items-start space-x-3">
                        <div className="flex-shrink-0 w-10 h-10 bg-primary-100 dark:bg-primary-900/30 rounded-lg flex items-center justify-center">
                          {pageState.event.location_type === 'online' ? (
                            <Globe className="w-5 h-5 text-primary-600 dark:text-primary-400" />
                          ) : (
                            <MapPin className="w-5 h-5 text-primary-600 dark:text-primary-400" />
                          )}
                        </div>
                        <div>
                          <p className="font-medium text-gray-900 dark:text-white">
                            {pageState.event.location_type === 'online' ? '–û–Ω–ª–∞–π–Ω' : pageState.event.venue_name || '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è'}
                          </p>
                          {pageState.event.location_type === 'offline' && pageState.event.address && (
                            <p className="text-gray-600 dark:text-gray-400 text-sm">
                              {pageState.event.address}
                            </p>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                  {pageState.event.description && (
                    <div className="bg-white dark:bg-dark-800 rounded-xl shadow-lg p-6">
                      <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">
                        –û–ø–∏—Å–∞–Ω–∏–µ
                      </h2>
                      <div 
                        className="prose prose-lg max-w-none dark:prose-invert"
                        dangerouslySetInnerHTML={{ __html: pageState.event.description }}
                      />
                    </div>
                  )}

                  {/* –ì–∞–ª–µ—Ä–µ—è */}
                  {eventImages.length > 1 && (
                    <div className="bg-white dark:bg-dark-800 rounded-xl shadow-lg p-6">
                      <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">
                        –ì–∞–ª–µ—Ä–µ—è
                      </h2>
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                        {eventImages.slice(1).map((image, index) => (
                          <img
                            key={index}
                            src={image}
                            alt={`${pageState.event.title} - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 2}`}
                            className="w-full h-32 object-cover rounded-lg cursor-pointer hover:opacity-80 transition-opacity"
                            onClick={() => openGallery(index + 1)}
                            loading="lazy"
                          />
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
                <div className="space-y-6">
                  {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
                  <div className="bg-white dark:bg-dark-800 rounded-xl shadow-lg p-6 sticky top-24">
                    <div className="text-center">
                      <div className="mb-4">
                        <span className="text-3xl font-bold text-primary-600 dark:text-primary-400">
                          {pageState.event.payment_type === 'free' ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' : 
                           `${pageState.event.base_price?.toLocaleString()} ${pageState.event.currency || 'RUB'}`}
                        </span>
                      </div>
                      
                      <button
                        onClick={openRegistration}
                        className="w-full btn-primary text-lg py-3 mb-4"
                      >
                        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                      </button>
                      
                      {pageState.event.registrations_count !== undefined && (
                        <p className="text-gray-600 dark:text-gray-400 text-sm">
                          <Users className="h-4 w-4 inline mr-1" />
                          {pageState.event.registrations_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        </p>
                      )}
                    </div>
                  </div>

                  {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                  <div className="bg-white dark:bg-dark-800 rounded-xl shadow-lg p-6">
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                      –î–µ—Ç–∞–ª–∏
                    </h3>
                    <div className="space-y-3 text-sm">
                      {pageState.event.event_type && (
                        <div className="flex items-center">
                          <Tag className="h-4 w-4 mr-2 text-gray-400" />
                          <span className="text-gray-600 dark:text-gray-400">–¢–∏–ø:</span>
                          <span className="ml-2 text-gray-900 dark:text-white">
                            {pageState.event.event_type}
                          </span>
                        </div>
                      )}
                      
                      {pageState.event.language_code && (
                        <div className="flex items-center">
                          <Globe className="h-4 w-4 mr-2 text-gray-400" />
                          <span className="text-gray-600 dark:text-gray-400">–Ø–∑—ã–∫:</span>
                          <span className="ml-2 text-gray-900 dark:text-white">
                            {pageState.event.language_code === 'ru' ? '–†—É—Å—Å–∫–∏–π' : 
                             pageState.event.language_code === 'en' ? '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π' : 
                             pageState.event.language_code}
                          </span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
            {pageState.isRegistering && (
              <RegistrationModal
                event={pageState.event}
                isOpen={pageState.isRegistering}
                onClose={closeRegistration}
              />
            )}

            {/* –ì–∞–ª–µ—Ä–µ—è –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ */}
            {pageState.showGallery && (
              <div className="fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center">
                <button
                  onClick={closeGallery}
                  className="absolute top-4 right-4 text-white hover:text-gray-300 z-10"
                >
                  <X className="h-8 w-8" />
                </button>
                
                <button
                  onClick={prevImage}
                  className="absolute left-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 z-10"
                >
                  <ChevronLeft className="h-8 w-8" />
                </button>
                
                <button
                  onClick={nextImage}
                  className="absolute right-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 z-10"
                >
                  <ChevronRight className="h-8 w-8" />
                </button>
                
                <img
                  src={eventImages[pageState.selectedImage]}
                  alt={`${pageState.event.title} - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${pageState.selectedImage + 1}`}
                  className="max-w-full max-h-full object-contain"
                />
                
                <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white">
                  {pageState.selectedImage + 1} / {eventImages.length}
                </div>
              </div>
            )}
          </div>
        )}
      </UnifiedLoadingPageWrapper>
    </Layout>
  );
};

export default EventDetailsPage;