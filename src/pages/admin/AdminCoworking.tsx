// src/pages/admin/AdminCoworking.tsx
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π sh_site_settings

import React, { useState, useEffect } from 'react';
import { Plus, Search, Edit, Trash2, ChevronUp, ChevronDown, Save, X, Building2, Upload, Eye, EyeOff } from 'lucide-react';
import { toast } from 'react-hot-toast';
import { 
  getCoworkingPageSettings, 
  updateCoworkingPageSettings,
  updateCoworkingService,
  deleteCoworkingService,
  reorderCoworkingServices,
  type CoworkingService, 
  type CoworkingPageSettings 
} from '../../api/coworking';

const AdminCoworking: React.FC = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [services, setServices] = useState<CoworkingService[]>([]);
  const [pageSettings, setPageSettings] = useState<CoworkingPageSettings>({
    title: '',
    description: '',
    heroImage: '',
    address: '',
    phone: '',
    working_hours: '',
    email: '',
    telegram: '',
    services: [],
    mainServices: [],
    metaDescription: '',
    showBookingForm: true,
    bookingFormFields: ['name', 'contact', 'phone', 'comment']
  });
  
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [editingService, setEditingService] = useState<CoworkingService | null>(null);
  const [showServiceForm, setShowServiceForm] = useState(false);
  const [activeTab, setActiveTab] = useState<'header' | 'services'>('header');

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('üè¢ Loading coworking admin data...');
      
      const response = await getCoworkingPageSettings();
      
      if (response.error) {
        throw new Error(response.error);
      }

      if (response.data) {
        setPageSettings(response.data);
        setServices(response.data.services || []);
        console.log('‚úÖ Coworking admin data loaded successfully');
      }
      
    } catch (err) {
      console.error('‚ùå Error loading coworking data:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    } finally {
      setLoading(false);
    }
  };

  const handleSaveHeader = async () => {
    try {
      setSaving(true);
      
      const response = await updateCoworkingPageSettings({
        title: pageSettings.title,
        description: pageSettings.description,
        heroImage: pageSettings.heroImage,
        address: pageSettings.address,
        phone: pageSettings.phone,
        working_hours: pageSettings.working_hours,
        email: pageSettings.email,
        telegram: pageSettings.telegram,
        metaDescription: pageSettings.metaDescription,
        showBookingForm: pageSettings.showBookingForm,
        bookingFormFields: pageSettings.bookingFormFields
      });

      if (response.error) {
        throw new Error(response.error);
      }
      
      toast.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      setError(null);
    } catch (err) {
      console.error('Error saving header:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    } finally {
      setSaving(false);
    }
  };

  const handleSaveService = async () => {
    try {
      if (!editingService) return;

      const response = await updateCoworkingService(editingService);

      if (response.error) {
        throw new Error(response.error);
      }
      
      await fetchData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      setEditingService(null);
      setShowServiceForm(false);
      toast.success('–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (err) {
      console.error('Error saving service:', err);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏');
    }
  };

  const handleAddService = () => {
    const newService: CoworkingService = {
      id: '', // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ API
      name: '',
      description: '',
      price: 0,
      currency: 'euro',
      period: '—á–∞—Å',
      active: true,
      image_url: '',
      order: services.length,
      main_service: true
    };
    
    setEditingService(newService);
    setShowServiceForm(true);
  };

  const handleEditService = (service: CoworkingService) => {
    setEditingService({ ...service });
    setShowServiceForm(true);
  };

  const handleDeleteService = async (serviceId: string) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É?')) return;

    try {
      const response = await deleteCoworkingService(serviceId);

      if (response.error) {
        throw new Error(response.error);
      }
      
      await fetchData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      toast.success('–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞');
    } catch (err) {
      console.error('Error deleting service:', err);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏');
    }
  };

  const moveService = async (serviceId: string, direction: 'up' | 'down') => {
    const currentIndex = services.findIndex(s => s.id === serviceId);
    if (currentIndex === -1) return;

    const newIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;
    if (newIndex < 0 || newIndex >= services.length) return;

    const newServices = [...services];
    [newServices[currentIndex], newServices[newIndex]] = [newServices[newIndex], newServices[currentIndex]];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    const reorderedIds = newServices.map(s => s.id);
    
    try {
      const response = await reorderCoworkingServices(reorderedIds);
      
      if (response.error) {
        throw new Error(response.error);
      }
      
      await fetchData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    } catch (err) {
      console.error('Error reordering services:', err);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞');
    }
  };

  const toggleServiceActive = async (service: CoworkingService) => {
    try {
      const response = await updateCoworkingService({
        ...service,
        active: !service.active
      });

      if (response.error) {
        throw new Error(response.error);
      }
      
      await fetchData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      toast.success(`–£—Å–ª—É–≥–∞ ${!service.active ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'}`);
    } catch (err) {
      console.error('Error toggling service:', err);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É—Å–ª—É–≥–∏');
    }
  };

  const filteredServices = services.filter(service =>
    service.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    service.description.toLowerCase().includes(searchQuery.toLowerCase())
  );

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
        <span className="ml-3 text-gray-600 dark:text-gray-300">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</span>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–æ–º
          </h1>
          <p className="text-gray-600 dark:text-gray-300 mt-1">
            –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —É—Å–ª—É–≥ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞
          </p>
          <p className="text-sm text-blue-600 dark:text-blue-400 mt-1">
            üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É (sh_site_settings)
          </p>
        </div>
      </div>

      {/* –¢–∞–±—ã */}
      <div className="border-b border-gray-200 dark:border-gray-700">
        <nav className="-mb-px flex space-x-8">
          <button
            onClick={() => setActiveTab('header')}
            className={`py-2 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'header'
                ? 'border-primary-500 text-primary-600 dark:text-primary-400'
                : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'
            }`}
          >
            <Building2 className="h-4 w-4 inline mr-2" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          </button>
          <button
            onClick={() => setActiveTab('services')}
            className={`py-2 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'services'
                ? 'border-primary-500 text-primary-600 dark:text-primary-400'
                : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'
            }`}
          >
            <Plus className="h-4 w-4 inline mr-2" />
            –£—Å–ª—É–≥–∏ ({services.length})
          </button>
        </nav>
      </div>

      {error && (
        <div className="bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800 rounded-lg p-4">
          <p className="text-red-700 dark:text-red-300">{error}</p>
        </div>
      )}

      {/* –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      {activeTab === 'header' && (
        <div className="bg-white dark:bg-dark-800 rounded-xl shadow-sm p-6">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞
            </h2>
            <button
              onClick={handleSaveHeader}
              disabled={saving}
              className="btn-primary flex items-center gap-2"
            >
              {saving ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                </>
              ) : (
                <>
                  <Save className="h-4 w-4" />
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </>
              )}
            </button>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                </label>
                <input
                  type="text"
                  value={pageSettings.title}
                  onChange={(e) => setPageSettings(prev => ({ ...prev, title: e.target.value }))}
                  className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –û–ø–∏—Å–∞–Ω–∏–µ
                </label>
                <textarea
                  value={pageSettings.description}
                  onChange={(e) => setPageSettings(prev => ({ ...prev, description: e.target.value }))}
                  rows={3}
                  className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                  placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (URL)
                </label>
                <input
                  type="url"
                  value={pageSettings.heroImage}
                  onChange={(e) => setPageSettings(prev => ({ ...prev, heroImage: e.target.value }))}
                  className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                  placeholder="https://example.com/image.jpg"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  META –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–ª—è SEO)
                </label>
                <textarea
                  value={pageSettings.metaDescription}
                  onChange={(e) => setPageSettings(prev => ({ ...prev, metaDescription: e.target.value }))}
                  rows={2}
                  className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
                />
              </div>
            </div>

            {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –ê–¥—Ä–µ—Å
                </label>
                <input
                  type="text"
                  value={pageSettings.address}
                  onChange={(e) => setPageSettings(prev => ({ ...prev, address: e.target.value }))}
                  className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                  placeholder="–ê–¥—Ä–µ—Å –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –¢–µ–ª–µ—Ñ–æ–Ω
                </label>
                <input
                  type="tel"
                  value={pageSettings.phone}
                  onChange={(e) => setPageSettings(prev => ({ ...prev, phone: e.target.value }))}
                  className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                  placeholder="+381 XX XXX XXXX"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
                </label>
                <input
                  type="text"
                  value={pageSettings.working_hours}
                  onChange={(e) => setPageSettings(prev => ({ ...prev, working_hours: e.target.value }))}
                  className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                  placeholder="–ü–Ω-–ü—Ç: 9:00-22:00"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Email
                </label>
                <input
                  type="email"
                  value={pageSettings.email}
                  onChange={(e) => setPageSettings(prev => ({ ...prev, email: e.target.value }))}
                  className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                  placeholder="info@coworking.com"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Telegram
                </label>
                <input
                  type="text"
                  value={pageSettings.telegram}
                  onChange={(e) => setPageSettings(prev => ({ ...prev, telegram: e.target.value }))}
                  className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                  placeholder="@coworking"
                />
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –í–∫–ª–∞–¥–∫–∞ —É—Å–ª—É–≥ */}
      {activeTab === 'services' && (
        <div className="space-y-6">
          {/* –ü–æ–∏—Å–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ */}
          <div className="bg-white dark:bg-dark-800 rounded-xl shadow-sm p-6">
            <div className="flex flex-col sm:flex-row gap-4 justify-between items-start sm:items-center">
              <div className="relative flex-1 max-w-md">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="–ü–æ–∏—Å–∫ —É—Å–ª—É–≥..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                />
              </div>
              
              <button
                onClick={handleAddService}
                className="btn-primary flex items-center gap-2"
              >
                <Plus className="h-4 w-4" />
                –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É
              </button>
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ */}
          <div className="bg-white dark:bg-dark-800 rounded-xl shadow-sm overflow-hidden">
            {filteredServices.length === 0 ? (
              <div className="p-12 text-center">
                <div className="w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Building2 className="h-8 w-8 text-gray-400" />
                </div>
                <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                  {searchQuery ? '–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–µ—Ç —É—Å–ª—É–≥'}
                </h3>
                <p className="text-gray-500 dark:text-gray-400 mb-4">
                  {searchQuery ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞' : '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —É—Å–ª—É–≥—É –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞'}
                </p>
                {!searchQuery && (
                  <button
                    onClick={handleAddService}
                    className="btn-primary"
                  >
                    –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É
                  </button>
                )}
              </div>
            ) : (
              <div className="divide-y divide-gray-200 dark:divide-gray-700">
                {filteredServices.map((service, index) => (
                  <div key={service.id} className="p-6">
                    <div className="flex items-start gap-4">
                      {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
                      <div className="w-20 h-20 bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden flex-shrink-0">
                        {service.image_url ? (
                          <img
                            src={service.image_url.startsWith('http') 
                              ? service.image_url 
                              : `${import.meta.env.VITE_SUPABASE_URL}/storage/v1/object/public/images/${service.image_url}`
                            }
                            alt={service.name}
                            className="w-full h-full object-cover"
                          />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center">
                            <Building2 className="h-8 w-8 text-gray-400" />
                          </div>
                        )}
                      </div>

                      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ */}
                      <div className="flex-1 min-w-0">
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                              {service.name}
                              {service.main_service && (
                                <span className="ml-2 px-2 py-1 text-xs font-medium bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 rounded-full">
                                  –û—Å–Ω–æ–≤–Ω–∞—è
                                </span>
                              )}
                              {!service.active && (
                                <span className="ml-2 px-2 py-1 text-xs font-medium bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-300 rounded-full">
                                  –ù–µ–∞–∫—Ç–∏–≤–Ω–∞
                                </span>
                              )}
                            </h3>
                            
                            {service.description && (
                              <p className="text-gray-600 dark:text-gray-300 mt-1 line-clamp-2">
                                {service.description.replace(/<[^>]*>/g, '')}
                              </p>
                            )}
                            
                            <div className="flex items-center gap-4 mt-2">
                              <span className="text-lg font-bold text-primary-600 dark:text-primary-400">
                                {service.price} {service.currency === 'euro' ? '‚Ç¨' : service.currency === '–∫–æ—Ñ–µ' ? '‚òï' : service.currency} / {service.period}
                              </span>
                              <span className="text-sm text-gray-500 dark:text-gray-400">
                                –ü–æ—Ä—è–¥–æ–∫: {service.order}
                              </span>
                            </div>
                          </div>

                          {/* –î–µ–π—Å—Ç–≤–∏—è */}
                          <div className="flex items-center gap-2 ml-4">
                            <button
                              onClick={() => toggleServiceActive(service)}
                              className={`p-2 rounded-lg transition-colors ${
                                service.active 
                                  ? 'text-green-600 hover:bg-green-50 dark:hover:bg-green-900/20' 
                                  : 'text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700'
                              }`}
                              title={service.active ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                            >
                              {service.active ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
                            </button>
                            
                            <button
                              onClick={() => moveService(service.id, 'up')}
                              disabled={index === 0}
                              className="p-2 text-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
                              title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö"
                            >
                              <ChevronUp className="h-4 w-4" />
                            </button>
                            
                            <button
                              onClick={() => moveService(service.id, 'down')}
                              disabled={index === filteredServices.length - 1}
                              className="p-2 text-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
                              title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑"
                            >
                              <ChevronDown className="h-4 w-4" />
                            </button>
                            
                            <button
                              onClick={() => handleEditService(service)}
                              className="p-2 text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg"
                              title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                            >
                              <Edit className="h-4 w-4" />
                            </button>
                            
                            <button
                              onClick={() => handleDeleteService(service.id)}
                              className="p-2 text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg"
                              title="–£–¥–∞–ª–∏—Ç—å"
                            >
                              <Trash2 className="h-4 w-4" />
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏ */}
      {showServiceForm && editingService && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 transition-opacity" aria-hidden="true">
              <div className="absolute inset-0 bg-gray-500 opacity-75" onClick={() => setShowServiceForm(false)}></div>
            </div>

            <div className="inline-block align-bottom bg-white dark:bg-dark-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full">
              <div className="bg-white dark:bg-dark-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-lg font-medium text-gray-900 dark:text-white">
                    {editingService.id ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É' : '–ù–æ–≤–∞—è —É—Å–ª—É–≥–∞'}
                  </h3>
                  <button
                    onClick={() => setShowServiceForm(false)}
                    className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                  >
                    <X className="h-6 w-6" />
                  </button>
                </div>

                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
                      </label>
                      <input
                        type="text"
                        value={editingService.name}
                        onChange={(e) => setEditingService(prev => prev ? { ...prev, name: e.target.value } : null)}
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        –¶–µ–Ω–∞
                      </label>
                      <input
                        type="number"
                        value={editingService.price}
                        onChange={(e) => setEditingService(prev => prev ? { ...prev, price: Number(e.target.value) } : null)}
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                        placeholder="0"
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        –í–∞–ª—é—Ç–∞
                      </label>
                      <select
                        value={editingService.currency}
                        onChange={(e) => setEditingService(prev => prev ? { ...prev, currency: e.target.value as any } : null)}
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                      >
                        <option value="euro">Euro (‚Ç¨)</option>
                        <option value="RSD">RSD</option>
                        <option value="–∫–æ—Ñ–µ">–ö–æ—Ñ–µ (‚òï)</option>
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        –ü–µ—Ä–∏–æ–¥
                      </label>
                      <select
                        value={editingService.period}
                        onChange={(e) => setEditingService(prev => prev ? { ...prev, period: e.target.value as any } : null)}
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                      >
                        <option value="—á–∞—Å">–ß–∞—Å</option>
                        <option value="–¥–µ–Ω—å">–î–µ–Ω—å</option>
                        <option value="–º–µ—Å—è—Ü">–ú–µ—Å—è—Ü</option>
                      </select>
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      –û–ø–∏—Å–∞–Ω–∏–µ
                    </label>
                    <textarea
                      value={editingService.description}
                      onChange={(e) => setEditingService(prev => prev ? { ...prev, description: e.target.value } : null)}
                      rows={4}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                      placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML)"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    </label>
                    <input
                      type="url"
                      value={editingService.image_url}
                      onChange={(e) => setEditingService(prev => prev ? { ...prev, image_url: e.target.value } : null)}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                      placeholder="https://example.com/image.jpg"
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="flex items-center">
                      <input
                        type="checkbox"
                        id="main_service"
                        checked={editingService.main_service}
                        onChange={(e) => setEditingService(prev => prev ? { ...prev, main_service: e.target.checked } : null)}
                        className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 dark:border-gray-600 rounded"
                      />
                      <label htmlFor="main_service" className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
                        –û—Å–Ω–æ–≤–Ω–∞—è —É—Å–ª—É–≥–∞
                      </label>
                    </div>

                    <div className="flex items-center">
                      <input
                        type="checkbox"
                        id="active"
                        checked={editingService.active}
                        onChange={(e) => setEditingService(prev => prev ? { ...prev, active: e.target.checked } : null)}
                        className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 dark:border-gray-600 rounded"
                      />
                      <label htmlFor="active" className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
                        –ê–∫—Ç–∏–≤–Ω–∞—è —É—Å–ª—É–≥–∞
                      </label>
                    </div>
                  </div>
                </div>

                <div className="flex gap-3 mt-6 pt-4">
                  <button
                    onClick={() => setShowServiceForm(false)}
                    className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button
                    onClick={handleSaveService}
                    className="flex-1 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
                  >
                    {editingService.id ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminCoworking;