// src/pages/admin/AdminEvents.tsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { 
  Calendar, 
  MapPin, 
  Users, 
  Plus, 
  Search, 
  Filter,
  MoreVertical,
  Edit,
  Trash2,
  Eye,
  CheckSquare,
  Square,
  Loader2
} from 'lucide-react';
import { supabase } from '../../lib/supabase';
import { toast } from 'react-hot-toast';
import { formatRussianDate, formatTimeRange, formatTimeFromTimestamp, isPastEvent } from '../../utils/dateUtils';
import EventDetailsModal from '../../components/admin/EventDetailsModal';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–±—ã—Ç–∏—è
interface Event {
  id: string;
  title: string;
  description?: string;
  location?: string;
  start_at: string;
  end_at?: string;
  status: 'active' | 'draft' | 'past';
  payment_type: 'free' | 'cost' | 'donation';
  price?: number;
  currency?: string;
  created_at: string;
  updated_at: string;
  
  // –ü–æ–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
  registrations?: {
    current: number;
    max_regs?: number;
    reg_list?: any[];
    current_adults?: number;
    current_children?: number;
  };
  registrations_list?: any[];
  current_registration_count?: string | number;
  max_registrations?: number;
  active_registrations_count?: number;
  total_registrations_count?: number;
  current_registrations?: number;
  available_spots?: number;
  
  // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å sh_registrations
  sh_registrations_count?: number;
  max_attendees?: number;
}

const AdminEvents: React.FC = () => {
  const [events, setEvents] = useState<Event[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [sortBy, setSortBy] = useState<string>('created');
  const [selectedEvents, setSelectedEvents] = useState<string[]>([]);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);

  const statusColors = {
    active: 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400',
    draft: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400',
    past: 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400'
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã sh_events
  const fetchEventsFromNewTable = async () => {
    console.log('üîÑ Trying to load from sh_events...');
    
    let query = supabase
      .from('sh_events')
      .select('*');

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞
    if (statusFilter === 'active') {
      query = query.eq('status', 'active');
    } else if (statusFilter === 'past') {
      query = query.eq('status', 'past');
    } else if (statusFilter === 'draft') {
      query = query.eq('status', 'draft');
    } else if (statusFilter !== 'all') {
      query = query.eq('status', statusFilter);
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if (sortBy === 'date') {
      query = query.order('start_at', { ascending: true });
    } else if (sortBy === 'created') {
      query = query.order('created_at', { ascending: false });
    } else if (sortBy === 'title') {
      query = query.order('title', { ascending: true });
    }

    const { data, error } = await query;
    
    if (error) {
      console.error('Error fetching from sh_events:', error);
      // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü–µ –µ—Å–ª–∏ –Ω–æ–≤–∞—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      return fetchEventsFromOldTable();
    }

    console.log('‚úÖ Loaded from sh_events:', data?.length, 'events');

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    const enrichedEvents = (data || []).map(event => ({
      ...event,
      // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –∏–∑ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      location: event.venue_name,
      address: event.venue_address,
      price: event.base_price,
      payment_type: event.payment_type,
      description: event.description || event.short_description,
      event_type: event.event_type,
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏)
      registrations: {
        current: 0, // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
        max_regs: event.max_attendees
      },
      current_registration_count: 0, // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
      max_registrations: event.max_attendees,
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–∞–∫ fallback
      active_registrations_count: 0,
      total_registrations_count: 0,
      current_registrations: 0,
      available_spots: event.max_attendees
    }));

    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∏–∑ sh_registrations
    const eventsWithRegistrationCounts = await Promise.all(
      enrichedEvents.map(async (event) => {
        const { count } = await supabase
          .from('sh_registrations')
          .select('*', { count: 'exact', head: true })
          .eq('event_id', event.id)
          .eq('registration_status', 'active');

        return {
          ...event,
          sh_registrations_count: count || 0,
          // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          active_registrations_count: count || 0,
          current_registration_count: count || 0,
          registrations: {
            ...event.registrations,
            current: count || 0
          }
        };
      })
    );

    return eventsWithRegistrationCounts;
  };

  // Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
  const fetchEventsFromOldTable = async () => {
    console.log('üì¶ Fallback to events table...');
    
    let query = supabase
      .from('events')
      .select('*');

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    if (statusFilter === 'active') {
      query = query.eq('status', 'active');
    } else if (statusFilter === 'past') {
      query = query.eq('status', 'past');  
    } else if (statusFilter === 'draft') {
      query = query.eq('status', 'draft');
    } else if (statusFilter !== 'all') {
      query = query.eq('status', statusFilter);
    }

    if (sortBy === 'date') {
      query = query.order('start_at', { ascending: true });
    } else if (sortBy === 'created') {
      query = query.order('created_at', { ascending: false });
    } else if (sortBy === 'title') {
      query = query.order('title', { ascending: true });
    }

    const { data, error } = await query;
    
    if (error) {
      console.error('Error fetching events:', error);
      throw error;
    }

    console.log('üì¶ Loaded from events table:', data?.length, 'events');
    return data || [];
  };

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const fetchEvents = async () => {
    try {
      setIsLoading(true);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
      const eventsData = await fetchEventsFromNewTable();
      setEvents(eventsData);
      
    } catch (error) {
      console.error('Error in fetchEvents:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π');
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchEvents();
  }, [statusFilter, sortBy]);

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
  const handleDeleteEvents = async () => {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${selectedEvents.length} ${selectedEvents.length === 1 ? '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ' : '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'}?`)) {
      return;
    }

    try {
      // –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∏–∑ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã sh_events
      let { error } = await supabase
        .from('sh_events')
        .delete()
        .in('id', selectedEvents);

      if (error) {
        console.log('Failed to delete from sh_events, trying events table:', error);
        
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
        const { error: oldTableError } = await supabase
          .from('events')
          .delete()
          .in('id', selectedEvents);

        if (oldTableError) throw oldTableError;
      }

      toast.success(`–£–¥–∞–ª–µ–Ω–æ ${selectedEvents.length} ${selectedEvents.length === 1 ? '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ' : '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'}`);
      setSelectedEvents([]);
      fetchEvents();
    } catch (error) {
      console.error('Error deleting events:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π'); 
    }
  };

  const toggleEventSelection = (eventId: string, e: React.MouseEvent) => {
    e.stopPropagation();
    setSelectedEvents(prev => 
      prev.includes(eventId)
        ? prev.filter(id => id !== eventId)
        : [...prev, eventId]
    );
  };

  const toggleAllEvents = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (selectedEvents.length === filteredEvents.length) {
      setSelectedEvents([]);
    } else {
      setSelectedEvents(filteredEvents.map(event => event.id));
    }
  };

  const filteredEvents = events.filter(event => {
    const matchesSearch = 
      event.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      event.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      event.location?.toLowerCase().includes(searchQuery.toLowerCase());

    return matchesSearch;
  });

  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø–ú–ò
  
  // Helper function to get current registration count from either new or legacy structure
  const getCurrentRegistrationCount = (event: Event): number => {
    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–∞–Ω–Ω—ã–º –∏–∑ sh_registrations
    if (event.sh_registrations_count !== undefined) {
      return event.sh_registrations_count;
    }
    
    // –§–æ–ª–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
    if (event.registrations?.current !== undefined) {
      return event.registrations.current;
    }
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–æ–ª–ª–±—ç–∫
    return typeof event.current_registration_count === 'string' 
      ? parseInt(event.current_registration_count) || 0
      : event.current_registration_count || 0;
  };

  // Helper function to get max registrations from either new or legacy structure
  const getMaxRegistrations = (event: Event): number | null => {
    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
    if (event.max_attendees !== undefined) {
      return event.max_attendees;
    }
    
    // –§–æ–ª–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
    if (event.registrations?.max_regs !== undefined) {
      return event.registrations.max_regs;
    }
    return event.max_registrations || null;
  };
  // Helper function to get price display text based on payment type
  const getPriceDisplay = (event: Event): string => {
    const paymentType = event.payment_type;
    const price = event.price;

    if (paymentType === 'free') {
      return '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
    } else if (paymentType === 'donation') {
      return '–î–æ–Ω–∞—Ç';
    } else if (paymentType === 'cost' && price !== null && price !== undefined) {
      return price === 0 ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' : `${price} ${event.currency || 'RUB'}`;
    } else {
      return '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö
  const shouldShowRegistrations = (event: Event): boolean => {
    const currentCount = getCurrentRegistrationCount(event);
    const maxRegs = getMaxRegistrations(event);
    
    return (
      currentCount > 0 || // –ï—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      maxRegs !== null || // –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç
      event.payment_type !== 'free' || // –ü–ª–∞—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
      event.status === 'active' // –ê–∫—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    );
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
  const hasRegistrationSystem = (event: Event): boolean => {
    return !!(event.registrations || event.registrations_list || event.current_registration_count !== undefined);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  const formatEventDateTime = (event: Event): string => {
    if (!event.start_at) return '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    
    const dateStr = formatRussianDate(event.start_at);
    const timeStr = event.end_at 
      ? formatTimeRange(event.start_at, event.end_at)
      : formatTimeFromTimestamp(event.start_at);
    
    return `${dateStr} ‚Ä¢ ${timeStr}`;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
  const formatEventTitle = (title: string) => {
    const words = title.split(' ');
    if (words.length <= 4) return { line1: title, line2: null };
    
    const midPoint = Math.ceil(words.length / 2);
    const line1 = words.slice(0, midPoint).join(' ');
    const line2 = words.slice(midPoint).join(' ');
    
    return { line1, line2 };
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏
  const handleEventClick = (event: Event) => {
    setSelectedEvent(event);
    setShowDetailsModal(true);
  };

  const tabs = [
    { id: 'active', label: '–ê–∫—Ç–∏–≤–Ω—ã–µ', count: events.filter(e => e.status === 'active' && (!e.end_at || !isPastEvent(e.end_at))).length },
    { id: 'past', label: '–ü—Ä–æ—à–µ–¥—à–∏–µ', count: events.filter(e => e.status === 'past' || (e.end_at && isPastEvent(e.end_at))).length },
    { id: 'draft', label: '–ß–µ—Ä–Ω–æ–≤–∏–∫–∏', count: events.filter(e => e.status === 'draft').length }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-100 dark:from-dark-900 dark:via-dark-900 dark:to-dark-800 py-8 font-sans">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-12 text-center">
          <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-primary-600 via-primary-500 to-secondary-500 bg-clip-text text-transparent mb-4 font-heading">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
          </h1>
          <p className="text-xl text-gray-600 dark:text-gray-300 max-w-2xl mx-auto leading-relaxed">
            –°–æ–∑–¥–∞–≤–∞–π—Ç–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
          </p>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è */}
        <div className="flex justify-center mb-10">
          <Link 
            to="/admin/events/new"
            className="inline-flex items-center gap-3 px-8 py-4 bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg font-heading"
          >
            <Plus className="h-6 w-6" />
            –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
          </Link>
        </div>

        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="bg-white dark:bg-dark-800 rounded-2xl shadow-lg border border-gray-200 dark:border-dark-700 mb-8">
          {/* –¢–∞–±—ã */}
          <div className="border-b border-gray-200 dark:border-dark-600">
            <nav className="flex space-x-8 px-6">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setStatusFilter(tab.id)}
                  className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors ${
                    statusFilter === tab.id
                      ? 'border-primary-500 text-primary-600 dark:text-primary-400'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
                  }`}
                >
                  {tab.label} ({tab.count})
                </button>
              ))}
            </nav>
          </div>

          {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
          <div className="p-6 border-b border-gray-200 dark:border-dark-600">
            <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
              <div className="flex-1 min-w-0">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                  <input
                    type="text"
                    placeholder="–ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-dark-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                  />
                </div>
              </div>
              
              <div className="flex gap-3">
                <select
                  value={sortBy}
                  onChange={(e) => setSortBy(e.target.value)}
                  className="px-4 py-3 border border-gray-300 dark:border-dark-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-dark-700 dark:text-white"
                >
                  <option value="created">–ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è</option>
                  <option value="date">–ü–æ –¥–∞—Ç–µ —Å–æ–±—ã—Ç–∏—è</option>
                  <option value="title">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
                </select>
              </div>
            </div>

            {/* –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
            {selectedEvents.length > 0 && (
              <div className="mt-4 flex items-center justify-between bg-primary-50 dark:bg-primary-900/20 rounded-lg p-4">
                <span className="text-primary-700 dark:text-primary-300 font-medium">
                  –í—ã–±—Ä–∞–Ω–æ: {selectedEvents.length} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
                </span>
                <button
                  onClick={handleDeleteEvents}
                  className="flex items-center gap-2 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors"
                >
                  <Trash2 className="h-4 w-4" />
                  –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            )}
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π */}
        {isLoading ? (
          <div className="text-center py-16">
            <div className="relative inline-block">
              <Loader2 className="w-12 h-12 animate-spin text-primary-500" />
              <div className="absolute inset-0 w-12 h-12 border-2 border-primary-200 dark:border-primary-800 rounded-full"></div>
            </div>
            <p className="mt-4 text-gray-600 dark:text-gray-300 font-medium">–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...</p>
          </div>
        ) : filteredEvents.length === 0 ? (
          <div className="text-center py-16">
            <div className="w-24 h-24 bg-gradient-to-br from-primary-100 to-primary-200 dark:from-primary-900/20 dark:to-primary-800/20 rounded-full flex items-center justify-center mx-auto mb-6">
              <Calendar className="w-12 h-12 text-primary-500" />
            </div>
            <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-2 font-heading">
              –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </h3>
            <p className="text-gray-600 dark:text-gray-400 mb-8 max-w-md mx-auto">
              {searchQuery 
                ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'
                : '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'}
            </p>
            <Link 
              to="/admin/events/new"
              className="inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg font-heading"
            >
              <Plus className="h-5 w-5" />
              –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            </Link>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {filteredEvents.map(event => {
              const { line1, line2 } = formatEventTitle(event.title);
              const maxRegistrations = getMaxRegistrations(event);
              const currentRegistrationCount = getCurrentRegistrationCount(event);
              const fillPercentage = maxRegistrations ? (currentRegistrationCount / maxRegistrations) * 100 : 0;
              const isEventPast = event.end_at ? isPastEvent(event.end_at) : false;
            